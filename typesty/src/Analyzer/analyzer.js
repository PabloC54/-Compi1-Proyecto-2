/* parser generated by jison 0.4.17 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var analyzer = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,28],$V1=[1,26],$V2=[1,27],$V3=[1,41],$V4=[1,42],$V5=[1,43],$V6=[1,44],$V7=[1,45],$V8=[1,31],$V9=[1,32],$Va=[1,33],$Vb=[1,34],$Vc=[1,35],$Vd=[1,36],$Ve=[1,38],$Vf=[1,39],$Vg=[1,40],$Vh=[5,29,31,35,37,41,42,43,44,45,75,81,84,87,89,90,91,96,97,98,99],$Vi=[1,59],$Vj=[1,57],$Vk=[1,58],$Vl=[1,69],$Vm=[1,78],$Vn=[1,74],$Vo=[1,72],$Vp=[1,73],$Vq=[1,79],$Vr=[1,80],$Vs=[1,81],$Vt=[1,82],$Vu=[1,83],$Vv=[31,71,77],$Vw=[1,118],$Vx=[1,119],$Vy=[1,120],$Vz=[1,121],$VA=[1,122],$VB=[1,123],$VC=[1,124],$VD=[1,125],$VE=[1,126],$VF=[1,127],$VG=[1,128],$VH=[1,129],$VI=[1,130],$VJ=[29,34,36,38,46,47,48,49,50,51,52,53,54,55,56,57,58,72,88],$VK=[34,38],$VL=[1,146],$VM=[29,34,36],$VN=[1,156],$VO=[5,29,31,35,37,41,42,43,44,45,75,81,83,84,87,89,90,91,96,97,98,99],$VP=[29,34,36,38,57,58,72,88],$VQ=[1,178],$VR=[29,34,36,38,46,47,52,53,54,55,56,57,58,72,88],$VS=[29,34,36,38,46,47,48,49,51,52,53,54,55,56,57,58,72,88],$VT=[29,34,36,38,52,53,54,55,56,57,58,72,88],$VU=[34,36],$VV=[29,87,89];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INI":3,"INS":4,"EOF":5,"S":6,"DECLARACION_FUNCION":7,"DECLARACION_METODO":8,"EXEC":9,"DECLARACION_VARIABLE":10,"ASIGNACION_VARIABLE":11,"INCREMENTO_VARIABLE":12,"DECREMENTO_VARIABLE":13,"DECLARACION_VECTOR":14,"DECLARACION_LISTA":15,"ADD_LISTA":16,"MODIFICACION_LISTA":17,"S_IF":18,"S_SWITCH":19,"S_WHILE":20,"S_FOR":21,"S_DO":22,"S_LLAMADA":23,"S_RETURN":24,"S_BREAK":25,"S_CONTINUE":26,"BLOQUE":27,"llaveA":28,"llaveB":29,"TIPO":30,"id":31,"parA":32,"PARAMETROS":33,"parB":34,"r_void":35,"coma":36,"r_exec":37,"puntocoma":38,"igual":39,"E":40,"r_int":41,"r_double":42,"r_boolean":43,"r_char":44,"r_string":45,"opar_suma":46,"opar_resta":47,"opar_multiplicacion":48,"opar_division":49,"opar_potencia":50,"opar_modulo":51,"oprel_igualacion":52,"oprel_diferenciacion":53,"oprel_menor":54,"oprel_menorigual":55,"oprel_mayor":56,"oplog_or":57,"oplog_and":58,"oplog_not":59,"LLAMADA":60,"ACCESO_VECTOR":61,"ACCESO_LISTA":62,"int":63,"double":64,"char":65,"string":66,"boolean":67,"INCREMENTO":68,"DECREMENTO":69,"VALORES":70,"corA":71,"corB":72,"r_new":73,"MODIFICACION_VECTOR":74,"r_list":75,"menor":76,"mayor":77,"list":78,"punto":79,"r_add":80,"r_if":81,"S_ELSE":82,"r_else":83,"r_switch":84,"CASES":85,"S_DEFAULT":86,"r_case":87,"dospuntos":88,"r_default":89,"r_while":90,"r_for":91,"INICIALIZACION":92,"ACTUALIZACION":93,"ASIGNACION":94,"DECLARACION":95,"r_do":96,"r_return":97,"r_break":98,"r_continue":99,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",28:"llaveA",29:"llaveB",31:"id",32:"parA",34:"parB",35:"r_void",36:"coma",37:"r_exec",38:"puntocoma",39:"igual",41:"r_int",42:"r_double",43:"r_boolean",44:"r_char",45:"r_string",46:"opar_suma",47:"opar_resta",48:"opar_multiplicacion",49:"opar_division",50:"opar_potencia",51:"opar_modulo",52:"oprel_igualacion",53:"oprel_diferenciacion",54:"oprel_menor",55:"oprel_menorigual",56:"oprel_mayor",57:"oplog_or",58:"oplog_and",59:"oplog_not",63:"int",64:"double",65:"char",66:"string",67:"boolean",71:"corA",72:"corB",73:"r_new",75:"r_list",76:"menor",77:"mayor",78:"list",79:"punto",80:"r_add",81:"r_if",83:"r_else",84:"r_switch",87:"r_case",88:"dospuntos",89:"r_default",90:"r_while",91:"r_for",96:"r_do",97:"r_return",98:"r_break",99:"r_continue"},
productions_: [0,[3,2],[3,2],[4,2],[4,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[27,3],[27,2],[27,3],[7,6],[7,5],[8,6],[8,5],[33,4],[33,2],[9,2],[10,3],[10,5],[11,4],[30,1],[30,1],[30,1],[30,1],[30,1],[40,3],[40,3],[40,3],[40,3],[40,3],[40,3],[40,3],[40,3],[40,3],[40,3],[40,3],[40,3],[40,3],[40,2],[40,2],[40,3],[40,1],[40,1],[40,1],[40,1],[40,1],[40,1],[40,1],[40,1],[40,1],[12,2],[13,2],[68,3],[69,3],[70,3],[70,1],[14,11],[14,9],[61,4],[74,7],[15,12],[16,7],[62,6],[17,9],[18,5],[18,6],[18,4],[82,2],[82,2],[19,8],[19,7],[19,4],[85,5],[85,4],[86,3],[20,5],[20,4],[21,9],[21,4],[92,1],[92,1],[93,1],[93,1],[93,1],[94,3],[95,4],[22,7],[22,3],[23,2],[60,3],[60,4],[24,3],[25,2],[26,2]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
console.log($$[$0-1]);
break;
case 2:
 console.error("("+this._$.first_line + ", " + this._$.first_column+") Error sintáctico: "+yytext); 
break;
case 3:
 this.$ = $$[$0-1]; this.$.push($$[$0]); 
break;
case 4: case 73:
 this.$ = [$$[$0]]; 
break;
case 5: case 6: case 7: case 8: case 9: case 10: case 11: case 12: case 13: case 14: case 15: case 16: case 17: case 18: case 19: case 20: case 21: case 22: case 23: case 24: case 38: case 39: case 40: case 41: case 42: case 59: case 60: case 61: case 85: case 86: case 97: case 98: case 99: case 100: case 101:
 this.$ = $$[$0]; 
break;
case 25: case 58: case 68: case 69: case 106:
 this.$ = $$[$0-1]; 
break;
case 26:
 this.$ = []; 
break;
case 27: case 84: case 89: case 94: case 96: case 105:
 console.log("Recuperación de error en ",yytext," (",this._$.last_line,",",this._$.last_column,")"); 
break;
case 28:
 this.$ = {
            Instruccion: "Funcion",
            Tipo: $$[$0-5],
            ID: $$[$0-4],
            Parametros: $$[$0-2],
            Instrucciones: $$[$0]
        }; 
break;
case 29:
 this.$ = {
            Instruccion: "Funcion",
            Tipo: $$[$0-4],
            ID: $$[$0-3],
            Parametros: null,
            Instrucciones: $$[$0]
        }; 
break;
case 30:
 this.$ = {
            Instruccion: "Metodo",
            Tipo: null,
            ID: $$[$0-4],
            Parametros: $$[$0-2],
            Instrucciones: $$[$0]
        }; 
break;
case 31:
 this.$ = {
            Instruccion: "Metodo",
            Tipo: null,
            ID: $$[$0-3],
            Parametros: null,
            Instrucciones: $$[$0]
        }; 
break;
case 32:
 this.$ = $$[$0-3]; this.$.push({
            Tipo: $$[$0-1],
            ID: $$[$0]
        }); 
break;
case 33:
 this.$ = [{
            Tipo: $$[$0-1],
            ID: $$[$0]
        }]; 
break;
case 34:
 this.$ = {
            Instruccion: "Exec",
            Llamada: $$[$0]
        }; 
break;
case 35:
 this.$ = {
            Instruccion: "Declaracion",
            Tipo: $$[$0-2],
            ID: $$[$0-1],
            E:null
        }; 
break;
case 36:
 this.$ = {
            Instruccion: "Declaracion",
            Tipo: $$[$0-4],
            ID: $$[$0-3],
            E: $$[$0-1]
        }; 
break;
case 37:
 this.$ = {
            Instruccion: "Asignacion",
            ID: $$[$0-3],
            E: $$[$0-1]
        }; 
break;
case 43: case 44: case 45: case 46: case 47: case 48: case 49: case 50: case 51: case 52: case 53: case 54: case 55:
 this.$ = {
            Izquierda: $$[$0-2],
            Derecha: $$[$0]
        }; 
break;
case 56: case 57:
 this.$ = {
            Izquierda: $$[$0],
            Derecha: null
        }; 
break;
case 62:
 this.$ = {
            Tipo: "id",
            Valor: $$[$0]
        }; 
break;
case 63:
 this.$ = {
            Tipo: "int",
            Valor: $$[$0]
        }; 
break;
case 64:
 this.$ = {
            Tipo: "double",
            Valor: $$[$0]
        }; 
break;
case 65:
 this.$ = {
            Tipo: "char",
            Valor: $$[$0]
        }; 
break;
case 66:
 this.$ = {
            Tipo: "string",
            Valor: $$[$0]
        }; 
break;
case 67:
 this.$ = {
            Tipo: "boolean",
            Valor: $$[$0]
        }; 
break;
case 70:
 this.$ = {
            Instruccion: "Incremento",
            ID: $$[$0-2]
        }; 
break;
case 71:
 this.$ = {
            Instruccion: "Decremento",
            ID: $$[$0-2]
        }; 
break;
case 72:
 this.$ = $$[$0-2]; this.$.push($$[$0]); 
break;
case 74: case 75: case 76: case 77: case 78: case 79: case 80: case 81:
 this.$ = {
            Instruccion: "Declarar_vector"
        }; 
break;
case 82:
 this.$ = {
            Instruccion: "If",
            Condicion: $$[$0-2],
            Instrucciones_t: $$[$0],
            Instrucciones_f: null
        }; 
break;
case 83:
 this.$ = {
            Instruccion: "If",
            Condicion: $$[$0-3],
            Instrucciones_t: $$[$0-1],
            Instrucciones_f: $$[$0]
        }; 
break;
case 87:
 this.$ = {
            Instruccion: "Switch",
            E: $$[$0-5],
            Cases: $$[$0-2],
            Default: $$[$0-1]
        };
break;
case 88:
 this.$ = {
            Instruccion: "Switch",
            E: $$[$0-4],
            Cases: $$[$0-1],
            Default: null
        };
break;
case 90:
 this.$ = $$[$0-4]; this.$.push( {
            Instruccion: "Case",
            E: $$[$0-2],
            Instrucciones: $$[$0]
        }); 
break;
case 91:
 this.$ = {
            Instruccion: "Case",
            E: $$[$0-1],
            Instrucciones: $$[$01]
        }; 
break;
case 92:
 this.$ = {i:"def"}; 
break;
case 93:
 this.$ = {
            Instruccion: "While",
            Condicion: $$[$0-2],
            Instrucciones: $$[$0]
        }; 
break;
case 95:
 this.$ = {Instruccion:For} 
break;
case 102:
 this.$ ={
            Instruccion: "Asignacion",
            ID: $$[$0-2],
            E: $$[$0]
            }
        
break;
case 103:
 this.$ = {
            Instruccion: "Declaracion",
            Tipo: $$[$0-3],
            ID: $$[$0-2],
            E: $$[$0]
        }; 
break;
case 104:
 this.$ = {Instruccion:DO} 
break;
case 107: case 108:
 this.$ = {Instruccion:Llamada} 
break;
case 109:
 this.$ = {Instruccion:Return}; 
break;
case 110:
 this.$ = {Instruccion:Break}; 
break;
case 111:
 this.$ = {Instruccion:Continue}; 
break;
}
},
table: [{2:[1,3],3:1,4:2,6:4,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:17,20:18,21:19,22:20,23:21,24:22,25:23,26:24,30:25,31:$V0,35:$V1,37:$V2,41:$V3,42:$V4,43:$V5,44:$V6,45:$V7,60:37,68:29,69:30,75:$V8,81:$V9,84:$Va,90:$Vb,91:$Vc,96:$Vd,97:$Ve,98:$Vf,99:$Vg},{1:[3]},{5:[1,46],6:47,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:17,20:18,21:19,22:20,23:21,24:22,25:23,26:24,30:25,31:$V0,35:$V1,37:$V2,41:$V3,42:$V4,43:$V5,44:$V6,45:$V7,60:37,68:29,69:30,75:$V8,81:$V9,84:$Va,90:$Vb,91:$Vc,96:$Vd,97:$Ve,98:$Vf,99:$Vg},{5:[1,48]},o($Vh,[2,4]),o($Vh,[2,5]),o($Vh,[2,6]),o($Vh,[2,7]),o($Vh,[2,8]),o($Vh,[2,9]),o($Vh,[2,10]),o($Vh,[2,11]),o($Vh,[2,12]),o($Vh,[2,13]),o($Vh,[2,14]),o($Vh,[2,15]),o($Vh,[2,16]),o($Vh,[2,17]),o($Vh,[2,18]),o($Vh,[2,19]),o($Vh,[2,20]),o($Vh,[2,21]),o($Vh,[2,22]),o($Vh,[2,23]),o($Vh,[2,24]),{31:[1,49],71:[1,50]},{31:[1,51]},{23:52,31:[1,53],60:37},{32:$Vi,39:[1,54],46:$Vj,47:$Vk,71:[1,56],79:[1,55]},{38:[1,60]},{38:[1,61]},{76:[1,62]},{32:[1,63]},{32:[1,64]},{32:[1,65]},{32:[1,66]},{2:[1,68],27:67,28:$Vl},{38:[1,70]},{31:$Vm,32:$Vn,40:71,47:$Vo,59:$Vp,60:75,61:76,62:77,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu},{38:[1,84]},{38:[1,85]},o($Vv,[2,38]),o($Vv,[2,39]),o($Vv,[2,40]),o($Vv,[2,41]),o($Vv,[2,42]),{1:[2,1]},o($Vh,[2,3]),{1:[2,2]},{32:[1,86],38:[1,87],39:[1,88]},{72:[1,89]},{32:[1,90]},o($Vh,[2,34]),{32:$Vi},{31:$Vm,32:$Vn,40:91,47:$Vo,59:$Vp,60:75,61:76,62:77,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu},{80:[1,92]},{71:[1,93]},{46:[1,94]},{47:[1,95]},{31:$Vm,32:$Vn,34:[1,96],40:98,47:$Vo,59:$Vp,60:75,61:76,62:77,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu,70:97},o($Vh,[2,68]),o($Vh,[2,69]),{30:99,41:$V3,42:$V4,43:$V5,44:$V6,45:$V7},{2:[1,101],31:$Vm,32:$Vn,40:100,47:$Vo,59:$Vp,60:75,61:76,62:77,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu},{2:[1,103],31:$Vm,32:$Vn,40:102,47:$Vo,59:$Vp,60:75,61:76,62:77,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu},{2:[1,105],31:$Vm,32:$Vn,40:104,47:$Vo,59:$Vp,60:75,61:76,62:77,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu},{2:[1,107],30:111,31:[1,110],41:$V3,42:$V4,43:$V5,44:$V6,45:$V7,92:106,94:108,95:109},{90:[1,112]},{38:[1,113]},{2:[1,116],4:114,6:4,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:17,20:18,21:19,22:20,23:21,24:22,25:23,26:24,29:[1,115],30:25,31:$V0,35:$V1,37:$V2,41:$V3,42:$V4,43:$V5,44:$V6,45:$V7,60:37,68:29,69:30,75:$V8,81:$V9,84:$Va,90:$Vb,91:$Vc,96:$Vd,97:$Ve,98:$Vf,99:$Vg},o($Vh,[2,106]),{38:[1,117],46:$Vw,47:$Vx,48:$Vy,49:$Vz,50:$VA,51:$VB,52:$VC,53:$VD,54:$VE,55:$VF,56:$VG,57:$VH,58:$VI},{31:$Vm,32:$Vn,40:131,47:$Vo,59:$Vp,60:75,61:76,62:77,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu},{31:$Vm,32:$Vn,40:132,47:$Vo,59:$Vp,60:75,61:76,62:77,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu},{31:$Vm,32:$Vn,40:133,47:$Vo,59:$Vp,60:75,61:76,62:77,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu},o($VJ,[2,59]),o($VJ,[2,60]),o($VJ,[2,61]),o($VJ,[2,62],{32:$Vi,71:[1,134]}),o($VJ,[2,63]),o($VJ,[2,64]),o($VJ,[2,65]),o($VJ,[2,66]),o($VJ,[2,67]),o($Vh,[2,110]),o($Vh,[2,111]),{30:137,33:135,34:[1,136],41:$V3,42:$V4,43:$V5,44:$V6,45:$V7},o($Vh,[2,35]),{31:$Vm,32:$Vn,40:138,47:$Vo,59:$Vp,60:75,61:76,62:77,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu},{31:[1,139]},{30:137,33:140,34:[1,141],41:$V3,42:$V4,43:$V5,44:$V6,45:$V7},{38:[1,142],46:$Vw,47:$Vx,48:$Vy,49:$Vz,50:$VA,51:$VB,52:$VC,53:$VD,54:$VE,55:$VF,56:$VG,57:$VH,58:$VI},{32:[1,143]},{31:$Vm,32:$Vn,40:144,47:$Vo,59:$Vp,60:75,61:76,62:77,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu},o($VK,[2,70]),o($VK,[2,71]),o($VJ,[2,107]),{34:[1,145],36:$VL},o($VM,[2,73],{46:$Vw,47:$Vx,48:$Vy,49:$Vz,50:$VA,51:$VB,52:$VC,53:$VD,54:$VE,55:$VF,56:$VG,57:$VH,58:$VI}),{77:[1,147]},{34:[1,148],46:$Vw,47:$Vx,48:$Vy,49:$Vz,50:$VA,51:$VB,52:$VC,53:$VD,54:$VE,55:$VF,56:$VG,57:$VH,58:$VI},{29:[1,149]},{34:[1,150],46:$Vw,47:$Vx,48:$Vy,49:$Vz,50:$VA,51:$VB,52:$VC,53:$VD,54:$VE,55:$VF,56:$VG,57:$VH,58:$VI},{29:[1,151]},{34:[1,152],46:$Vw,47:$Vx,48:$Vy,49:$Vz,50:$VA,51:$VB,52:$VC,53:$VD,54:$VE,55:$VF,56:$VG,57:$VH,58:$VI},{29:[1,153]},{38:[1,154]},{29:[1,155]},{38:[2,97]},{38:[2,98]},{39:$VN},{31:[1,157]},{32:[1,158]},o($Vh,[2,105]),{6:47,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:17,20:18,21:19,22:20,23:21,24:22,25:23,26:24,29:[1,159],30:25,31:$V0,35:$V1,37:$V2,41:$V3,42:$V4,43:$V5,44:$V6,45:$V7,60:37,68:29,69:30,75:$V8,81:$V9,84:$Va,90:$Vb,91:$Vc,96:$Vd,97:$Ve,98:$Vf,99:$Vg},o($VO,[2,26]),{29:[1,160]},o($Vh,[2,109]),{31:$Vm,32:$Vn,40:161,47:$Vo,59:$Vp,60:75,61:76,62:77,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu},{31:$Vm,32:$Vn,40:162,47:$Vo,59:$Vp,60:75,61:76,62:77,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu},{31:$Vm,32:$Vn,40:163,47:$Vo,59:$Vp,60:75,61:76,62:77,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu},{31:$Vm,32:$Vn,40:164,47:$Vo,59:$Vp,60:75,61:76,62:77,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu},{31:$Vm,32:$Vn,40:165,47:$Vo,59:$Vp,60:75,61:76,62:77,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu},{31:$Vm,32:$Vn,40:166,47:$Vo,59:$Vp,60:75,61:76,62:77,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu},{31:$Vm,32:$Vn,40:167,47:$Vo,59:$Vp,60:75,61:76,62:77,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu},{31:$Vm,32:$Vn,40:168,47:$Vo,59:$Vp,60:75,61:76,62:77,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu},{31:$Vm,32:$Vn,40:169,47:$Vo,59:$Vp,60:75,61:76,62:77,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu},{31:$Vm,32:$Vn,40:170,47:$Vo,59:$Vp,60:75,61:76,62:77,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu},{31:$Vm,32:$Vn,40:171,47:$Vo,59:$Vp,60:75,61:76,62:77,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu},{31:$Vm,32:$Vn,40:172,47:$Vo,59:$Vp,60:75,61:76,62:77,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu},{31:$Vm,32:$Vn,40:173,47:$Vo,59:$Vp,60:75,61:76,62:77,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu},o($VJ,[2,56]),o($VP,[2,57],{46:$Vw,47:$Vx,48:$Vy,49:$Vz,50:$VA,51:$VB,52:$VC,53:$VD,54:$VE,55:$VF,56:$VG}),{34:[1,174],46:$Vw,47:$Vx,48:$Vy,49:$Vz,50:$VA,51:$VB,52:$VC,53:$VD,54:$VE,55:$VF,56:$VG,57:$VH,58:$VI},{31:$Vm,32:$Vn,40:175,47:$Vo,59:$Vp,60:75,61:76,62:77,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu,71:[1,176]},{34:[1,177],36:$VQ},{27:179,28:$Vl},{31:[1,180]},{38:[1,181],46:$Vw,47:$Vx,48:$Vy,49:$Vz,50:$VA,51:$VB,52:$VC,53:$VD,54:$VE,55:$VF,56:$VG,57:$VH,58:$VI},{39:[1,182]},{34:[1,183],36:$VQ},{27:184,28:$Vl},o($Vh,[2,37]),{31:$Vm,32:$Vn,40:185,47:$Vo,59:$Vp,60:75,61:76,62:77,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu},{46:$Vw,47:$Vx,48:$Vy,49:$Vz,50:$VA,51:$VB,52:$VC,53:$VD,54:$VE,55:$VF,56:$VG,57:$VH,58:$VI,72:[1,186]},o($VJ,[2,108]),{31:$Vm,32:$Vn,40:187,47:$Vo,59:$Vp,60:75,61:76,62:77,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu},{31:[1,188]},{27:189,28:$Vl},o($Vh,[2,84]),{28:[1,190]},o($Vh,[2,89]),{27:191,28:$Vl},o($Vh,[2,94]),{31:$Vm,32:$Vn,40:192,47:$Vo,59:$Vp,60:75,61:76,62:77,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu},o($Vh,[2,96]),{31:$Vm,32:$Vn,40:193,47:$Vo,59:$Vp,60:75,61:76,62:77,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu},{39:[1,194]},{31:$Vm,32:$Vn,40:195,47:$Vo,59:$Vp,60:75,61:76,62:77,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu},o($VO,[2,25]),o($VO,[2,27]),o($VR,[2,43],{48:$Vy,49:$Vz,50:$VA,51:$VB}),o($VR,[2,44],{48:$Vy,49:$Vz,50:$VA,51:$VB}),o($VS,[2,45],{50:$VA}),o($VS,[2,46],{50:$VA}),o($VJ,[2,47]),o($VS,[2,48],{50:$VA}),o($VT,[2,49],{46:$Vw,47:$Vx,48:$Vy,49:$Vz,50:$VA,51:$VB}),o($VT,[2,50],{46:$Vw,47:$Vx,48:$Vy,49:$Vz,50:$VA,51:$VB}),o($VT,[2,51],{46:$Vw,47:$Vx,48:$Vy,49:$Vz,50:$VA,51:$VB}),o($VT,[2,52],{46:$Vw,47:$Vx,48:$Vy,49:$Vz,50:$VA,51:$VB}),o($VT,[2,53],{46:$Vw,47:$Vx,48:$Vy,49:$Vz,50:$VA,51:$VB}),o([29,34,36,38,57,72,88],[2,54],{46:$Vw,47:$Vx,48:$Vy,49:$Vz,50:$VA,51:$VB,52:$VC,53:$VD,54:$VE,55:$VF,56:$VG,58:$VI}),o($VP,[2,55],{46:$Vw,47:$Vx,48:$Vy,49:$Vz,50:$VA,51:$VB,52:$VC,53:$VD,54:$VE,55:$VF,56:$VG}),o($VJ,[2,58]),{46:$Vw,47:$Vx,48:$Vy,49:$Vz,50:$VA,51:$VB,52:$VC,53:$VD,54:$VE,55:$VF,56:$VG,57:$VH,58:$VI,72:[1,196]},{31:$Vm,32:$Vn,40:197,47:$Vo,59:$Vp,60:75,61:76,62:77,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu},{27:198,28:$Vl},{30:199,41:$V3,42:$V4,43:$V5,44:$V6,45:$V7},o($Vh,[2,29]),o($VU,[2,33]),o($Vh,[2,36]),{28:[1,201],73:[1,200]},{27:202,28:$Vl},o($Vh,[2,31]),{34:[1,203],46:$Vw,47:$Vx,48:$Vy,49:$Vz,50:$VA,51:$VB,52:$VC,53:$VD,54:$VE,55:$VF,56:$VG,57:$VH,58:$VI},{72:[1,204]},o($VM,[2,72],{46:$Vw,47:$Vx,48:$Vy,49:$Vz,50:$VA,51:$VB,52:$VC,53:$VD,54:$VE,55:$VF,56:$VG,57:$VH,58:$VI}),{39:[1,205]},o($Vh,[2,82],{82:206,83:[1,207]}),{85:208,87:[1,209]},o($Vh,[2,93]),{38:[1,210],46:$Vw,47:$Vx,48:$Vy,49:$Vz,50:$VA,51:$VB,52:$VC,53:$VD,54:$VE,55:$VF,56:$VG,57:$VH,58:$VI},o($VK,[2,102],{46:$Vw,47:$Vx,48:$Vy,49:$Vz,50:$VA,51:$VB,52:$VC,53:$VD,54:$VE,55:$VF,56:$VG,57:$VH,58:$VI}),{31:$Vm,32:$Vn,40:211,47:$Vo,59:$Vp,60:75,61:76,62:77,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu},{34:[1,212],46:$Vw,47:$Vx,48:$Vy,49:$Vz,50:$VA,51:$VB,52:$VC,53:$VD,54:$VE,55:$VF,56:$VG,57:$VH,58:$VI},o($VJ,[2,76]),{46:$Vw,47:$Vx,48:$Vy,49:$Vz,50:$VA,51:$VB,52:$VC,53:$VD,54:$VE,55:$VF,56:$VG,57:$VH,58:$VI,72:[1,213]},o($Vh,[2,28]),{31:[1,214]},{30:215,41:$V3,42:$V4,43:$V5,44:$V6,45:$V7},{31:$Vm,32:$Vn,40:98,47:$Vo,59:$Vp,60:75,61:76,62:77,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu,70:216},o($Vh,[2,30]),{38:[1,217]},{39:[1,218]},{73:[1,219]},o($Vh,[2,83]),{18:221,27:220,28:$Vl,81:$V9},{29:[1,223],86:222,87:[1,224],89:[1,225]},{31:$Vm,32:$Vn,40:226,47:$Vo,59:$Vp,60:75,61:76,62:77,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu},{31:[1,231],68:228,69:229,93:227,94:230},{38:[2,103],46:$Vw,47:$Vx,48:$Vy,49:$Vz,50:$VA,51:$VB,52:$VC,53:$VD,54:$VE,55:$VF,56:$VG,57:$VH,58:$VI},{38:[1,232]},{72:[1,233]},o($VU,[2,32]),{71:[1,234]},{29:[1,235],36:$VL},o($Vh,[2,79]),{31:$Vm,32:$Vn,40:236,47:$Vo,59:$Vp,60:75,61:76,62:77,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu},{78:[1,237]},o($Vh,[2,85]),o($Vh,[2,86]),{29:[1,238]},o($Vh,[2,88]),{31:$Vm,32:$Vn,40:239,47:$Vo,59:$Vp,60:75,61:76,62:77,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu},{88:[1,240]},{46:$Vw,47:$Vx,48:$Vy,49:$Vz,50:$VA,51:$VB,52:$VC,53:$VD,54:$VE,55:$VF,56:$VG,57:$VH,58:$VI,88:[1,241]},{34:[1,242]},{34:[2,99]},{34:[2,100]},{34:[2,101]},{39:$VN,46:$Vj,47:$Vk},o($Vh,[2,104]),o($VJ,[2,80]),{31:$Vm,32:$Vn,40:243,47:$Vo,59:$Vp,60:75,61:76,62:77,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu},{38:[1,244]},{38:[1,245],46:$Vw,47:$Vx,48:$Vy,49:$Vz,50:$VA,51:$VB,52:$VC,53:$VD,54:$VE,55:$VF,56:$VG,57:$VH,58:$VI},{76:[1,246]},o($Vh,[2,87]),{46:$Vw,47:$Vx,48:$Vy,49:$Vz,50:$VA,51:$VB,52:$VC,53:$VD,54:$VE,55:$VF,56:$VG,57:$VH,58:$VI,88:[1,247]},{4:248,6:4,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:17,20:18,21:19,22:20,23:21,24:22,25:23,26:24,30:25,31:$V0,35:$V1,37:$V2,41:$V3,42:$V4,43:$V5,44:$V6,45:$V7,60:37,68:29,69:30,75:$V8,81:$V9,84:$Va,90:$Vb,91:$Vc,96:$Vd,97:$Ve,98:$Vf,99:$Vg},{4:249,6:4,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:17,20:18,21:19,22:20,23:21,24:22,25:23,26:24,30:25,31:$V0,35:$V1,37:$V2,41:$V3,42:$V4,43:$V5,44:$V6,45:$V7,60:37,68:29,69:30,75:$V8,81:$V9,84:$Va,90:$Vb,91:$Vc,96:$Vd,97:$Ve,98:$Vf,99:$Vg},{27:250,28:$Vl},{46:$Vw,47:$Vx,48:$Vy,49:$Vz,50:$VA,51:$VB,52:$VC,53:$VD,54:$VE,55:$VF,56:$VG,57:$VH,58:$VI,72:[1,251]},o($Vh,[2,75]),o($Vh,[2,81]),{30:252,41:$V3,42:$V4,43:$V5,44:$V6,45:$V7},{4:253,6:4,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:17,20:18,21:19,22:20,23:21,24:22,25:23,26:24,30:25,31:$V0,35:$V1,37:$V2,41:$V3,42:$V4,43:$V5,44:$V6,45:$V7,60:37,68:29,69:30,75:$V8,81:$V9,84:$Va,90:$Vb,91:$Vc,96:$Vd,97:$Ve,98:$Vf,99:$Vg},{6:47,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:17,20:18,21:19,22:20,23:21,24:22,25:23,26:24,29:[2,92],30:25,31:$V0,35:$V1,37:$V2,41:$V3,42:$V4,43:$V5,44:$V6,45:$V7,60:37,68:29,69:30,75:$V8,81:$V9,84:$Va,90:$Vb,91:$Vc,96:$Vd,97:$Ve,98:$Vf,99:$Vg},o($VV,[2,91],{7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:17,20:18,21:19,22:20,23:21,24:22,25:23,26:24,30:25,68:29,69:30,60:37,6:47,31:$V0,35:$V1,37:$V2,41:$V3,42:$V4,43:$V5,44:$V6,45:$V7,75:$V8,81:$V9,84:$Va,90:$Vb,91:$Vc,96:$Vd,97:$Ve,98:$Vf,99:$Vg}),o($Vh,[2,95]),{38:[1,254]},{77:[1,255]},o($VV,[2,90],{7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:17,20:18,21:19,22:20,23:21,24:22,25:23,26:24,30:25,68:29,69:30,60:37,6:47,31:$V0,35:$V1,37:$V2,41:$V3,42:$V4,43:$V5,44:$V6,45:$V7,75:$V8,81:$V9,84:$Va,90:$Vb,91:$Vc,96:$Vd,97:$Ve,98:$Vf,99:$Vg}),o($Vh,[2,74]),{38:[1,256]},o($Vh,[2,78])],
defaultActions: {46:[2,1],48:[2,2],108:[2,97],109:[2,98],228:[2,99],229:[2,100],230:[2,101]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        function _parseError (msg, hash) {
            this.message = msg;
            this.hash = hash;
        }
        _parseError.prototype = Error;

        throw new _parseError(str, hash);
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:
break;
case 1:
break;
case 2:
break;
case 3:
break;
case 4:return "opar_suma";
break;
case 5:return "opar_resta";
break;
case 6:return "opar_multiplicacion";
break;
case 7:return "opar_division";
break;
case 8:return "opar_potencia";
break;
case 9:return "opar_modulo";
break;
case 10:return "oprel_igualacion";
break;
case 11:return "oprel_diferenciacion";
break;
case 12:return "oprel_menorigual";
break;
case 13:return "oprel_mayorigual";
break;
case 14:return "oprel_menor";
break;
case 15:return "oprel_mayor";
break;
case 16:return "oplog_or";
break;
case 17:return "oplog_and";
break;
case 18:return "oplog_not";
break;
case 19:return "ternary";
break;
case 20:return "parA";
break;
case 21:return "parB";
break;
case 22:return "corA";
break;
case 23:return "corB";
break;
case 24:return "llaveA";
break;
case 25:return "llaveB";
break;
case 26:return "igual";
break;
case 27:return "puntocoma";
break;
case 28:return "dospuntos";
break;
case 29:return "punto";
break;
case 30:return "coma";
break;
case 31:return "r_int";
break;
case 32:return "r_double";
break;
case 33:return "r_boolean";
break;
case 34:return "r_char";
break;
case 35:return "r_string";
break;
case 36:return "r_list";
break;
case 37:return "r_new";
break;
case 38:return "r_if";
break;
case 39:return "r_else";
break;
case 40:return "r_switch";
break;
case 41:return "r_case";
break;
case 42:return "r_default";
break;
case 43:return "r_while";
break;
case 44:return "r_for";
break;
case 45:return "r_do";
break;
case 46:return "r_break";
break;
case 47:return "r_continue";
break;
case 48:return "r_return";
break;
case 49:return "r_void";
break;
case 50:return "r_add";
break;
case 51:return "r_exec";
break;
case 52:return "int";
break;
case 53:return "double";
break;
case 54:return "char";
break;
case 55: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 66
break;
case 56: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 66
break;
case 57:return "id";
break;
case 58:return "EOF";
break;
case 59:console.error("error!");
break;
}
},
rules: [/^(?:\n)/i,/^(?:[\040\t\r]+)/i,/^(?:\/\/.*)/i,/^(?:[\/][*][^*]*[*]+([^\/][^*]*[*]+)*[\/])/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:\^)/i,/^(?:%)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:<)/i,/^(?:>)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:!)/i,/^(?:\?)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\{)/i,/^(?:\})/i,/^(?:=)/i,/^(?:;)/i,/^(?::)/i,/^(?:\.)/i,/^(?:,)/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:boolean\b)/i,/^(?:char\b)/i,/^(?:string\b)/i,/^(?:list\b)/i,/^(?:new\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:while\b)/i,/^(?:for\b)/i,/^(?:do\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:void\b)/i,/^(?:add\b)/i,/^(?:exec\b)/i,/^(?:[0-9]+)/i,/^(?:[0-9]+\.[0-9]+)/i,/^(?:\[\\x00-\\x7F\])/i,/^(?:"((\\n)|(\\\\)|(\\")|(\\t)|(\\')|[^\n\"])*")/i,/^(?:\(\(\\n\)\|\(\\\\\)\|\(\\\\"\)\|\(\\t\)\|\(\\'\)\|\[\^\\n'\]\)\*)/i,/^(?:[a-z][a-z0-9_]*)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = analyzer;
exports.Parser = analyzer.Parser;
exports.parse = function () { return analyzer.parse.apply(analyzer, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}