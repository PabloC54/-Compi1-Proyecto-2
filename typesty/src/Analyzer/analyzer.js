/* eslint-disable */
/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,29],$V1=[1,27],$V2=[1,28],$V3=[1,42],$V4=[1,43],$V5=[1,44],$V6=[1,45],$V7=[1,46],$V8=[1,32],$V9=[1,33],$Va=[1,34],$Vb=[1,35],$Vc=[1,36],$Vd=[1,37],$Ve=[1,39],$Vf=[1,40],$Vg=[1,41],$Vh=[5,30,32,36,38,42,43,44,45,46,78,81,84,87,88,89,90,95,96,97,98],$Vi=[1,60],$Vj=[1,58],$Vk=[1,59],$Vl=[1,70],$Vm=[1,80],$Vn=[1,76],$Vo=[1,74],$Vp=[1,75],$Vq=[1,81],$Vr=[1,82],$Vs=[1,83],$Vt=[1,84],$Vu=[1,85],$Vv=[32,35,57,75],$Vw=[1,121],$Vx=[1,122],$Vy=[1,123],$Vz=[1,124],$VA=[1,125],$VB=[1,126],$VC=[1,127],$VD=[1,128],$VE=[1,129],$VF=[1,130],$VG=[1,131],$VH=[1,132],$VI=[1,133],$VJ=[1,134],$VK=[1,135],$VL=[30,35,37,39,47,48,49,50,51,52,53,54,55,56,57,58,59,60,62,63,76],$VM=[35,39],$VN=[1,155],$VO=[30,35,37],$VP=[1,165],$VQ=[5,30,32,36,38,42,43,44,45,46,78,81,83,84,87,88,89,90,95,96,97,98],$VR=[30,35,37,39,59,60,62,63,76],$VS=[1,192],$VT=[30,35,37,39,47,48,53,54,55,56,57,58,59,60,62,63,76],$VU=[30,35,37,39,47,48,49,50,52,53,54,55,56,57,58,59,60,62,63,76],$VV=[30,35,37,39,53,54,55,56,57,58,59,60,62,63,76],$VW=[35,37],$VX=[30,87,88];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INI":3,"INS":4,"EOF":5,"S":6,"DECLARACION_FUNCION":7,"DECLARACION_METODO":8,"EXEC":9,"DECLARACION_VARIABLE":10,"ASIGNACION_VARIABLE":11,"INCREMENTO_VARIABLE":12,"DECREMENTO_VARIABLE":13,"DECLARACION_VECTOR":14,"MODIFICACION_VECTOR":15,"DECLARACION_LISTA":16,"ADD_LISTA":17,"MODIFICACION_LISTA":18,"S_IF":19,"S_SWITCH":20,"S_WHILE":21,"S_FOR":22,"S_DO":23,"S_LLAMADA":24,"S_RETURN":25,"S_BREAK":26,"S_CONTINUE":27,"BLOQUE":28,"llaveA":29,"llaveB":30,"TIPO":31,"id":32,"parA":33,"PARAMETROS":34,"parB":35,"r_void":36,"coma":37,"r_exec":38,"puntocoma":39,"igual":40,"E":41,"r_int":42,"r_double":43,"r_boolean":44,"r_char":45,"r_string":46,"opar_suma":47,"opar_resta":48,"opar_multiplicacion":49,"opar_division":50,"opar_potencia":51,"opar_modulo":52,"oprel_igualacion":53,"oprel_diferenciacion":54,"oprel_menor":55,"oprel_menorigual":56,"oprel_mayor":57,"oprel_mayorigual":58,"oplog_or":59,"oplog_and":60,"oplog_not":61,"ternario":62,"dospuntos":63,"LLAMADA":64,"ACCESO_VECTOR":65,"ACCESO_LISTA":66,"int":67,"double":68,"char":69,"string":70,"boolean":71,"INCREMENTO":72,"DECREMENTO":73,"VALORES":74,"corA":75,"corB":76,"r_new":77,"r_list":78,"punto":79,"r_add":80,"r_if":81,"S_ELSE":82,"r_else":83,"r_switch":84,"CASES":85,"S_DEFAULT":86,"r_case":87,"r_default":88,"r_while":89,"r_for":90,"INICIALIZACION":91,"ACTUALIZACION":92,"ASIGNACION":93,"DECLARACION":94,"r_do":95,"r_return":96,"r_break":97,"r_continue":98,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",29:"llaveA",30:"llaveB",32:"id",33:"parA",35:"parB",36:"r_void",37:"coma",38:"r_exec",39:"puntocoma",40:"igual",42:"r_int",43:"r_double",44:"r_boolean",45:"r_char",46:"r_string",47:"opar_suma",48:"opar_resta",49:"opar_multiplicacion",50:"opar_division",51:"opar_potencia",52:"opar_modulo",53:"oprel_igualacion",54:"oprel_diferenciacion",55:"oprel_menor",56:"oprel_menorigual",57:"oprel_mayor",58:"oprel_mayorigual",59:"oplog_or",60:"oplog_and",61:"oplog_not",62:"ternario",63:"dospuntos",67:"int",68:"double",69:"char",70:"string",71:"boolean",75:"corA",76:"corB",77:"r_new",78:"r_list",79:"punto",80:"r_add",81:"r_if",83:"r_else",84:"r_switch",87:"r_case",88:"r_default",89:"r_while",90:"r_for",95:"r_do",96:"r_return",97:"r_break",98:"r_continue"},
productions_: [0,[3,2],[3,2],[4,2],[4,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[28,3],[28,2],[28,3],[7,6],[7,5],[7,5],[8,6],[8,5],[8,5],[34,4],[34,2],[9,2],[10,3],[10,5],[11,4],[31,1],[31,1],[31,1],[31,1],[31,1],[41,3],[41,3],[41,3],[41,3],[41,3],[41,3],[41,3],[41,3],[41,3],[41,3],[41,3],[41,3],[41,3],[41,3],[41,2],[41,2],[41,5],[41,3],[41,1],[41,1],[41,1],[41,4],[41,3],[41,3],[41,1],[41,1],[41,1],[41,1],[41,1],[41,1],[12,2],[13,2],[72,3],[73,3],[74,3],[74,1],[14,11],[14,9],[65,4],[15,7],[16,12],[17,7],[66,6],[18,9],[19,5],[19,6],[19,5],[82,2],[82,2],[20,8],[20,7],[20,4],[85,5],[85,4],[86,3],[21,5],[21,4],[22,9],[22,4],[91,1],[91,1],[92,1],[92,1],[92,1],[93,3],[94,4],[23,7],[23,3],[24,2],[64,3],[64,4],[25,3],[25,2],[26,2],[27,2]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 return { body: $$[$0-1], errors: getErrores() } 
break;
case 2: case 28: case 31: case 34: case 92: case 97: case 102: case 104: case 113:
 Error(this._$.last_line, this._$.last_column, 'Sintáctico', `Se recuperó en '${yytext}'`); 
break;
case 3:
 this.$ = $$[$0-1]; this.$.push($$[$0]); 
break;
case 4: case 81:
 this.$ = [$$[$0]]; 
break;
case 5: case 6: case 7: case 8: case 9: case 10: case 11: case 12: case 13: case 14: case 15: case 16: case 17: case 18: case 19: case 20: case 21: case 22: case 23: case 24: case 25: case 41: case 42: case 43: case 44: case 45: case 64: case 65: case 66: case 93: case 94: case 105: case 106: case 107: case 108: case 109:
 this.$ = $$[$0]; 
break;
case 26: case 63: case 76: case 77: case 114:
 this.$ = $$[$0-1]; 
break;
case 27:
 this.$ = []; 
break;
case 29:
 this.$ = s.Funcion(this._$.first_line, this._$.first_column, $$[$0-5], $$[$0-4], $$[$0-2], $$[$0]); 
break;
case 30:
 this.$ = s.Funcion(this._$.first_line, this._$.first_column, $$[$0-4], $$[$0-3], [], $$[$0]); 
break;
case 32:
 this.$ = s.Metodo(this._$.first_line, this._$.first_column, $$[$0-4], $$[$0-2], $$[$0]); 
break;
case 33:
 this.$ = s.Metodo(this._$.first_line, this._$.first_column, $$[$0-3], [], $$[$0]); 
break;
case 35:
 this.$ = $$[$0-3]; this.$.push(s.Parametro(this._$.first_line, this._$.first_column, $$[$0-1], $$[$0])); 
break;
case 36:
 this.$ = [s.Parametro(this._$.first_line, this._$.first_column, $$[$0-1], $$[$0])]; 
break;
case 37:
 this.$ = s.Exec(this._$.first_line, this._$.first_column, $$[$0]); 
break;
case 38:
 this.$ = s.Declaracion(this._$.first_line, this._$.first_column, $$[$0-2], $$[$0-1], null); 
break;
case 39:
 this.$ = s.Declaracion(this._$.first_line, this._$.first_column, $$[$0-4], $$[$0-3], $$[$0-1]); 
break;
case 40:
 this.$ = s.Asignacion(this._$.first_line, this._$.first_column, $$[$0-3], $$[$0-1]); 
break;
case 46:
 this.$ = s.Operacion(this._$.first_line, this._$.first_column, 'suma', $$[$0-2], $$[$0]); 
break;
case 47:
 this.$ = s.Operacion(this._$.first_line, this._$.first_column, 'resta', $$[$0-2], $$[$0]); 
break;
case 48:
 this.$ = s.Operacion(this._$.first_line, this._$.first_column, 'multiplicacion', $$[$0-2], $$[$0]); 
break;
case 49:
 this.$ = s.Operacion(this._$.first_line, this._$.first_column, 'division', $$[$0-2], $$[$0]); 
break;
case 50:
 this.$ = s.Operacion(this._$.first_line, this._$.first_column, 'potencia', $$[$0-2], $$[$0]); 
break;
case 51:
 this.$ = s.Operacion(this._$.first_line, this._$.first_column, 'modulo', $$[$0-2], $$[$0]); 
break;
case 52:
 this.$ = s.Operacion(this._$.first_line, this._$.first_column, 'igualacion', $$[$0-2], $$[$0]); 
break;
case 53:
 this.$ = s.Operacion(this._$.first_line, this._$.first_column, 'diferenciacion', $$[$0-2], $$[$0]); 
break;
case 54:
 this.$ = s.Operacion(this._$.first_line, this._$.first_column, 'menor', $$[$0-2], $$[$0]); 
break;
case 55:
 this.$ = s.Operacion(this._$.first_line, this._$.first_column, 'menorigual', $$[$0-2], $$[$0]); 
break;
case 56:
 this.$ = s.Operacion(this._$.first_line, this._$.first_column, 'mayor', $$[$0-2], $$[$0]); 
break;
case 57:
 this.$ = s.Operacion(this._$.first_line, this._$.first_column, 'mayorigual', $$[$0-2], $$[$0]); 
break;
case 58:
 this.$ = s.Operacion(this._$.first_line, this._$.first_column, 'or', $$[$0-2], $$[$0]); 
break;
case 59:
 this.$ = s.Operacion(this._$.first_line, this._$.first_column, 'and', $$[$0-2], $$[$0]); 
break;
case 60:
 this.$ = s.Operacion(this._$.first_line, this._$.first_column, 'negacion', $$[$0]); 
break;
case 61:
 this.$ = s.Operacion(this._$.first_line, this._$.first_column, 'not', $$[$0]); 
break;
case 62:
 this.$ = s.Ternaria(this._$.first_line, this._$.first_column, $$[$0-4], $$[$0-2], $$[$0]); 
break;
case 67:
 this.$ = s.Operacion(this._$.first_line, this._$.first_column, 'casteo', s.Simbolo(this._$.first_line, this._$.first_column, $$[$0-2], $$[$0-2]), $$[$0]); 
break;
case 68:
 this.$ = s.Operacion(this._$.first_line, this._$.first_column, 'incremento',$$[$0-2]); 
break;
case 69:
 this.$ = s.Operacion(this._$.first_line, this._$.first_column, 'decremento', $$[$0-2]); 
break;
case 70:
 this.$ = s.Simbolo(this._$.first_line, this._$.first_column, 'id', $$[$0]); 
break;
case 71:
 this.$ = s.Simbolo(this._$.first_line, this._$.first_column, 'int', parseInt($$[$0])); 
break;
case 72:
 this.$ = s.Simbolo(this._$.first_line, this._$.first_column, 'double', parseFloat($$[$0])); 
break;
case 73:
 this.$ = s.Simbolo(this._$.first_line, this._$.first_column, 'char', $$[$0]); 
break;
case 74:
 this.$ = s.Simbolo(this._$.first_line, this._$.first_column, 'string', $$[$0]); 
break;
case 75:
 this.$ = s.Simbolo(this._$.first_line, this._$.first_column, 'boolean', $$[$0].toLowerCase() === 'true'); 
break;
case 78:
 this.$ = s.Incremento(this._$.first_line, this._$.first_column, $$[$0-2]); 
break;
case 79:
 this.$ = s.Decremento(this._$.first_line, this._$.first_column, $$[$0-2]); 
break;
case 80:
 this.$ = $$[$0-2]; this.$.push($$[$0]); 
break;
case 82:
 this.$ = s.Vector(this._$.first_line, this._$.first_column, $$[$0-10], $$[$0-7], $$[$0-4], $$[$0-2], null); 
break;
case 83:
 this.$ = s.Vector(this._$.first_line, this._$.first_column, $$[$0-8], $$[$0-5], null, null, $$[$0-2]); 
break;
case 84:
 this.$ = s.Acceso_vector(this._$.first_line, this._$.first_column, $$[$0-3], $$[$0-1]); 
break;
case 85:
 this.$ = s.Modificacion_vector(this._$.first_line, this._$.first_column, $$[$0-6], $$[$0-4], $$[$0-1]); 
break;
case 86:
 this.$ = s.Lista(this._$.first_line, this._$.first_column, $$[$0-9], $$[$0-7], $$[$0-2]); 
break;
case 87:
 this.$ = s.Add_lista(this._$.first_line, this._$.first_column, $$[$0-6], $$[$0-2]); 
break;
case 88:
 this.$ = s.Acceso_lista(this._$.first_line, this._$.first_column, $$[$0-5], $$[$0-2]); 
break;
case 89:
 this.$ = s.Modificacion_lista(this._$.first_line, this._$.first_column, $$[$0-8], $$[$0-5], $$[$0-1]); 
break;
case 90:
 this.$ = s.If(this._$.first_line, this._$.first_column, $$[$0-2], $$[$0], null); 
break;
case 91:
 this.$ = s.If(this._$.first_line, this._$.first_column, $$[$0-3], $$[$0-1], $$[$0]); 
break;
case 95:
 this.$ = s.Switch(this._$.first_line, this._$.first_column, $$[$0-5], $$[$0-2], $$[$0-1]); 
break;
case 96:
 this.$ = s.Switch(this._$.first_line, this._$.first_column, $$[$0-4], $$[$0-1], null); 
break;
case 98:
 this.$ = $$[$0-4]; this.$.push(s.Case(this._$.first_line, this._$.first_column, $$[$0-2], $$[$0])); 
break;
case 99:
 this.$ = [s.Case(this._$.first_line, this._$.first_column, $$[$0-2], $$[$0])]; 
break;
case 100:
 this.$ = s.Default(this._$.first_line, this._$.first_column, $$[$0]); 
break;
case 101:
 this.$ = s.While(this._$.first_line, this._$.first_column, $$[$0-2], $$[$0]); 
break;
case 103:
 this.$ = s.For(this._$.first_line, this._$.first_column, $$[$0-6], $$[$0-4], $$[$0-2], $$[$0]); 
break;
case 110:
 this.$ = s.Asignacion(this._$.first_line, this._$.first_column, $$[$0-2], $$[$0]); 
break;
case 111:
 this.$ = s.Declaracion(this._$.first_line, this._$.first_column, $$[$0-3], $$[$0-2], $$[$0]); 
break;
case 112:
 this.$ = s.Do_while(this._$.first_line, this._$.first_column, $$[$0-2], $$[$0-5]); 
break;
case 115:
 this.$ = s.Llamada(this._$.first_line, this._$.first_column, $$[$0-2], []); 
break;
case 116:
 this.$ = s.Llamada(this._$.first_line, this._$.first_column, $$[$0-3], $$[$0-1]); 
break;
case 117:
 this.$ = s.Return(this._$.first_line, this._$.first_column, $$[$0-1]); 
break;
case 118:
 this.$ = s.Return(this._$.first_line, this._$.first_column); 
break;
case 119:
 this.$ = s.Break(this._$.first_line, this._$.first_column); 
break;
case 120:
 this.$ = s.Continue(this._$.first_line, this._$.first_column); 
break;
}
},
table: [{2:[1,3],3:1,4:2,6:4,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:17,20:18,21:19,22:20,23:21,24:22,25:23,26:24,27:25,31:26,32:$V0,36:$V1,38:$V2,42:$V3,43:$V4,44:$V5,45:$V6,46:$V7,64:38,72:30,73:31,78:$V8,81:$V9,84:$Va,89:$Vb,90:$Vc,95:$Vd,96:$Ve,97:$Vf,98:$Vg},{1:[3]},{5:[1,47],6:48,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:17,20:18,21:19,22:20,23:21,24:22,25:23,26:24,27:25,31:26,32:$V0,36:$V1,38:$V2,42:$V3,43:$V4,44:$V5,45:$V6,46:$V7,64:38,72:30,73:31,78:$V8,81:$V9,84:$Va,89:$Vb,90:$Vc,95:$Vd,96:$Ve,97:$Vf,98:$Vg},{5:[1,49]},o($Vh,[2,4]),o($Vh,[2,5]),o($Vh,[2,6]),o($Vh,[2,7]),o($Vh,[2,8]),o($Vh,[2,9]),o($Vh,[2,10]),o($Vh,[2,11]),o($Vh,[2,12]),o($Vh,[2,13]),o($Vh,[2,14]),o($Vh,[2,15]),o($Vh,[2,16]),o($Vh,[2,17]),o($Vh,[2,18]),o($Vh,[2,19]),o($Vh,[2,20]),o($Vh,[2,21]),o($Vh,[2,22]),o($Vh,[2,23]),o($Vh,[2,24]),o($Vh,[2,25]),{32:[1,50],75:[1,51]},{32:[1,52]},{24:53,32:[1,54],64:38},{33:$Vi,40:[1,55],47:$Vj,48:$Vk,75:[1,56],79:[1,57]},{39:[1,61]},{39:[1,62]},{55:[1,63]},{33:[1,64]},{33:[1,65]},{33:[1,66]},{33:[1,67]},{2:[1,69],28:68,29:$Vl},{39:[1,71]},{32:$Vm,33:$Vn,39:[1,73],41:72,48:$Vo,61:$Vp,64:77,65:78,66:79,67:$Vq,68:$Vr,69:$Vs,70:$Vt,71:$Vu},{39:[1,86]},{39:[1,87]},o($Vv,[2,41]),o($Vv,[2,42]),o($Vv,[2,43]),o($Vv,[2,44]),o($Vv,[2,45]),{1:[2,1]},o($Vh,[2,3]),{1:[2,2]},{33:[1,88],39:[1,89],40:[1,90]},{76:[1,91]},{33:[1,92]},o($Vh,[2,37]),{33:$Vi},{32:$Vm,33:$Vn,41:93,48:$Vo,61:$Vp,64:77,65:78,66:79,67:$Vq,68:$Vr,69:$Vs,70:$Vt,71:$Vu},{32:$Vm,33:$Vn,41:94,48:$Vo,61:$Vp,64:77,65:78,66:79,67:$Vq,68:$Vr,69:$Vs,70:$Vt,71:$Vu,75:[1,95]},{80:[1,96]},{47:[1,97]},{48:[1,98]},{32:$Vm,33:$Vn,35:[1,99],41:101,48:$Vo,61:$Vp,64:77,65:78,66:79,67:$Vq,68:$Vr,69:$Vs,70:$Vt,71:$Vu,74:100},o($Vh,[2,76]),o($Vh,[2,77]),{31:102,42:$V3,43:$V4,44:$V5,45:$V6,46:$V7},{2:[1,104],32:$Vm,33:$Vn,41:103,48:$Vo,61:$Vp,64:77,65:78,66:79,67:$Vq,68:$Vr,69:$Vs,70:$Vt,71:$Vu},{2:[1,106],32:$Vm,33:$Vn,41:105,48:$Vo,61:$Vp,64:77,65:78,66:79,67:$Vq,68:$Vr,69:$Vs,70:$Vt,71:$Vu},{2:[1,108],32:$Vm,33:$Vn,41:107,48:$Vo,61:$Vp,64:77,65:78,66:79,67:$Vq,68:$Vr,69:$Vs,70:$Vt,71:$Vu},{2:[1,110],31:114,32:[1,113],42:$V3,43:$V4,44:$V5,45:$V6,46:$V7,91:109,93:111,94:112},{89:[1,115]},{39:[1,116]},{2:[1,119],4:117,6:4,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:17,20:18,21:19,22:20,23:21,24:22,25:23,26:24,27:25,30:[1,118],31:26,32:$V0,36:$V1,38:$V2,42:$V3,43:$V4,44:$V5,45:$V6,46:$V7,64:38,72:30,73:31,78:$V8,81:$V9,84:$Va,89:$Vb,90:$Vc,95:$Vd,96:$Ve,97:$Vf,98:$Vg},o($Vh,[2,114]),{39:[1,120],47:$Vw,48:$Vx,49:$Vy,50:$Vz,51:$VA,52:$VB,53:$VC,54:$VD,55:$VE,56:$VF,57:$VG,58:$VH,59:$VI,60:$VJ,62:$VK},o($Vh,[2,118]),{32:$Vm,33:$Vn,41:136,48:$Vo,61:$Vp,64:77,65:78,66:79,67:$Vq,68:$Vr,69:$Vs,70:$Vt,71:$Vu},{32:$Vm,33:$Vn,41:137,48:$Vo,61:$Vp,64:77,65:78,66:79,67:$Vq,68:$Vr,69:$Vs,70:$Vt,71:$Vu},{31:139,32:$Vm,33:$Vn,41:138,42:$V3,43:$V4,44:$V5,45:$V6,46:$V7,48:$Vo,61:$Vp,64:77,65:78,66:79,67:$Vq,68:$Vr,69:$Vs,70:$Vt,71:$Vu},o($VL,[2,64]),o($VL,[2,65]),o($VL,[2,66]),o($VL,[2,70],{33:$Vi,75:[1,140]}),o($VL,[2,71]),o($VL,[2,72]),o($VL,[2,73]),o($VL,[2,74]),o($VL,[2,75]),o($Vh,[2,119]),o($Vh,[2,120]),{2:[1,143],31:144,34:141,35:[1,142],42:$V3,43:$V4,44:$V5,45:$V6,46:$V7},o($Vh,[2,38]),{32:$Vm,33:$Vn,41:145,48:$Vo,61:$Vp,64:77,65:78,66:79,67:$Vq,68:$Vr,69:$Vs,70:$Vt,71:$Vu},{32:[1,146]},{2:[1,149],31:144,34:147,35:[1,148],42:$V3,43:$V4,44:$V5,45:$V6,46:$V7},{39:[1,150],47:$Vw,48:$Vx,49:$Vy,50:$Vz,51:$VA,52:$VB,53:$VC,54:$VD,55:$VE,56:$VF,57:$VG,58:$VH,59:$VI,60:$VJ,62:$VK},{47:$Vw,48:$Vx,49:$Vy,50:$Vz,51:$VA,52:$VB,53:$VC,54:$VD,55:$VE,56:$VF,57:$VG,58:$VH,59:$VI,60:$VJ,62:$VK,76:[1,151]},{32:$Vm,33:$Vn,41:152,48:$Vo,61:$Vp,64:77,65:78,66:79,67:$Vq,68:$Vr,69:$Vs,70:$Vt,71:$Vu},{33:[1,153]},o($VM,[2,78]),o($VM,[2,79]),o($VL,[2,115]),{35:[1,154],37:$VN},o($VO,[2,81],{47:$Vw,48:$Vx,49:$Vy,50:$Vz,51:$VA,52:$VB,53:$VC,54:$VD,55:$VE,56:$VF,57:$VG,58:$VH,59:$VI,60:$VJ,62:$VK}),{57:[1,156]},{35:[1,157],47:$Vw,48:$Vx,49:$Vy,50:$Vz,51:$VA,52:$VB,53:$VC,54:$VD,55:$VE,56:$VF,57:$VG,58:$VH,59:$VI,60:$VJ,62:$VK},{35:[1,158]},{35:[1,159],47:$Vw,48:$Vx,49:$Vy,50:$Vz,51:$VA,52:$VB,53:$VC,54:$VD,55:$VE,56:$VF,57:$VG,58:$VH,59:$VI,60:$VJ,62:$VK},{30:[1,160]},{35:[1,161],47:$Vw,48:$Vx,49:$Vy,50:$Vz,51:$VA,52:$VB,53:$VC,54:$VD,55:$VE,56:$VF,57:$VG,58:$VH,59:$VI,60:$VJ,62:$VK},{30:[1,162]},{39:[1,163]},{30:[1,164]},{39:[2,105]},{39:[2,106]},{40:$VP},{32:[1,166]},{33:[1,167]},o($Vh,[2,113]),{6:48,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:17,20:18,21:19,22:20,23:21,24:22,25:23,26:24,27:25,30:[1,168],31:26,32:$V0,36:$V1,38:$V2,42:$V3,43:$V4,44:$V5,45:$V6,46:$V7,64:38,72:30,73:31,78:$V8,81:$V9,84:$Va,89:$Vb,90:$Vc,95:$Vd,96:$Ve,97:$Vf,98:$Vg},o($VQ,[2,27]),{30:[1,169]},o($Vh,[2,117]),{32:$Vm,33:$Vn,41:170,47:[1,171],48:$Vo,61:$Vp,64:77,65:78,66:79,67:$Vq,68:$Vr,69:$Vs,70:$Vt,71:$Vu},{32:$Vm,33:$Vn,41:172,48:[1,173],61:$Vp,64:77,65:78,66:79,67:$Vq,68:$Vr,69:$Vs,70:$Vt,71:$Vu},{32:$Vm,33:$Vn,41:174,48:$Vo,61:$Vp,64:77,65:78,66:79,67:$Vq,68:$Vr,69:$Vs,70:$Vt,71:$Vu},{32:$Vm,33:$Vn,41:175,48:$Vo,61:$Vp,64:77,65:78,66:79,67:$Vq,68:$Vr,69:$Vs,70:$Vt,71:$Vu},{32:$Vm,33:$Vn,41:176,48:$Vo,61:$Vp,64:77,65:78,66:79,67:$Vq,68:$Vr,69:$Vs,70:$Vt,71:$Vu},{32:$Vm,33:$Vn,41:177,48:$Vo,61:$Vp,64:77,65:78,66:79,67:$Vq,68:$Vr,69:$Vs,70:$Vt,71:$Vu},{32:$Vm,33:$Vn,41:178,48:$Vo,61:$Vp,64:77,65:78,66:79,67:$Vq,68:$Vr,69:$Vs,70:$Vt,71:$Vu},{32:$Vm,33:$Vn,41:179,48:$Vo,61:$Vp,64:77,65:78,66:79,67:$Vq,68:$Vr,69:$Vs,70:$Vt,71:$Vu},{32:$Vm,33:$Vn,41:180,48:$Vo,61:$Vp,64:77,65:78,66:79,67:$Vq,68:$Vr,69:$Vs,70:$Vt,71:$Vu},{32:$Vm,33:$Vn,41:181,48:$Vo,61:$Vp,64:77,65:78,66:79,67:$Vq,68:$Vr,69:$Vs,70:$Vt,71:$Vu},{32:$Vm,33:$Vn,41:182,48:$Vo,61:$Vp,64:77,65:78,66:79,67:$Vq,68:$Vr,69:$Vs,70:$Vt,71:$Vu},{32:$Vm,33:$Vn,41:183,48:$Vo,61:$Vp,64:77,65:78,66:79,67:$Vq,68:$Vr,69:$Vs,70:$Vt,71:$Vu},{32:$Vm,33:$Vn,41:184,48:$Vo,61:$Vp,64:77,65:78,66:79,67:$Vq,68:$Vr,69:$Vs,70:$Vt,71:$Vu},{32:$Vm,33:$Vn,41:185,48:$Vo,61:$Vp,64:77,65:78,66:79,67:$Vq,68:$Vr,69:$Vs,70:$Vt,71:$Vu},{32:$Vm,33:$Vn,41:186,48:$Vo,61:$Vp,64:77,65:78,66:79,67:$Vq,68:$Vr,69:$Vs,70:$Vt,71:$Vu},o($VL,[2,60]),o($VR,[2,61],{47:$Vw,48:$Vx,49:$Vy,50:$Vz,51:$VA,52:$VB,53:$VC,54:$VD,55:$VE,56:$VF,57:$VG,58:$VH}),{35:[1,187],47:$Vw,48:$Vx,49:$Vy,50:$Vz,51:$VA,52:$VB,53:$VC,54:$VD,55:$VE,56:$VF,57:$VG,58:$VH,59:$VI,60:$VJ,62:$VK},{35:[1,188]},{32:$Vm,33:$Vn,41:189,48:$Vo,61:$Vp,64:77,65:78,66:79,67:$Vq,68:$Vr,69:$Vs,70:$Vt,71:$Vu,75:[1,190]},{35:[1,191],37:$VS},{28:193,29:$Vl},{30:[1,194]},{32:[1,195]},{39:[1,196],47:$Vw,48:$Vx,49:$Vy,50:$Vz,51:$VA,52:$VB,53:$VC,54:$VD,55:$VE,56:$VF,57:$VG,58:$VH,59:$VI,60:$VJ,62:$VK},{40:[1,197]},{35:[1,198],37:$VS},{28:199,29:$Vl},{30:[1,200]},o($Vh,[2,40]),{40:[1,201]},{47:$Vw,48:$Vx,49:$Vy,50:$Vz,51:$VA,52:$VB,53:$VC,54:$VD,55:$VE,56:$VF,57:$VG,58:$VH,59:$VI,60:$VJ,62:$VK,76:[1,202]},{32:$Vm,33:$Vn,41:203,48:$Vo,61:$Vp,64:77,65:78,66:79,67:$Vq,68:$Vr,69:$Vs,70:$Vt,71:$Vu},o($VL,[2,116]),{32:$Vm,33:$Vn,41:204,48:$Vo,61:$Vp,64:77,65:78,66:79,67:$Vq,68:$Vr,69:$Vs,70:$Vt,71:$Vu},{32:[1,205]},{28:206,29:$Vl},{28:207,29:$Vl},{29:[1,208]},o($Vh,[2,97]),{28:209,29:$Vl},o($Vh,[2,102]),{32:$Vm,33:$Vn,41:210,48:$Vo,61:$Vp,64:77,65:78,66:79,67:$Vq,68:$Vr,69:$Vs,70:$Vt,71:$Vu},o($Vh,[2,104]),{32:$Vm,33:$Vn,41:211,48:$Vo,61:$Vp,64:77,65:78,66:79,67:$Vq,68:$Vr,69:$Vs,70:$Vt,71:$Vu},{40:[1,212]},{32:$Vm,33:$Vn,41:213,48:$Vo,61:$Vp,64:77,65:78,66:79,67:$Vq,68:$Vr,69:$Vs,70:$Vt,71:$Vu},o($VQ,[2,26]),o($VQ,[2,28]),o($VT,[2,46],{49:$Vy,50:$Vz,51:$VA,52:$VB}),o($VL,[2,68]),o($VT,[2,47],{49:$Vy,50:$Vz,51:$VA,52:$VB}),o($VL,[2,69],{64:77,65:78,66:79,41:136,32:$Vm,33:$Vn,61:$Vp,67:$Vq,68:$Vr,69:$Vs,70:$Vt,71:$Vu}),o($VU,[2,48],{51:$VA}),o($VU,[2,49],{51:$VA}),o($VL,[2,50]),o($VU,[2,51],{51:$VA}),o($VV,[2,52],{47:$Vw,48:$Vx,49:$Vy,50:$Vz,51:$VA,52:$VB}),o($VV,[2,53],{47:$Vw,48:$Vx,49:$Vy,50:$Vz,51:$VA,52:$VB}),o($VV,[2,54],{47:$Vw,48:$Vx,49:$Vy,50:$Vz,51:$VA,52:$VB}),o($VV,[2,55],{47:$Vw,48:$Vx,49:$Vy,50:$Vz,51:$VA,52:$VB}),o($VV,[2,56],{47:$Vw,48:$Vx,49:$Vy,50:$Vz,51:$VA,52:$VB}),o($VV,[2,57],{47:$Vw,48:$Vx,49:$Vy,50:$Vz,51:$VA,52:$VB}),o([30,35,37,39,59,62,63,76],[2,58],{47:$Vw,48:$Vx,49:$Vy,50:$Vz,51:$VA,52:$VB,53:$VC,54:$VD,55:$VE,56:$VF,57:$VG,58:$VH,60:$VJ}),o($VR,[2,59],{47:$Vw,48:$Vx,49:$Vy,50:$Vz,51:$VA,52:$VB,53:$VC,54:$VD,55:$VE,56:$VF,57:$VG,58:$VH}),{47:$Vw,48:$Vx,49:$Vy,50:$Vz,51:$VA,52:$VB,53:$VC,54:$VD,55:$VE,56:$VF,57:$VG,58:$VH,59:$VI,60:$VJ,62:$VK,63:[1,214]},o($VL,[2,63]),{32:$Vm,33:$Vn,41:215,48:$Vo,61:$Vp,64:77,65:78,66:79,67:$Vq,68:$Vr,69:$Vs,70:$Vt,71:$Vu},{47:$Vw,48:$Vx,49:$Vy,50:$Vz,51:$VA,52:$VB,53:$VC,54:$VD,55:$VE,56:$VF,57:$VG,58:$VH,59:$VI,60:$VJ,62:$VK,76:[1,216]},{32:$Vm,33:$Vn,41:217,48:$Vo,61:$Vp,64:77,65:78,66:79,67:$Vq,68:$Vr,69:$Vs,70:$Vt,71:$Vu},{28:218,29:$Vl},{31:219,42:$V3,43:$V4,44:$V5,45:$V6,46:$V7},o($Vh,[2,30]),o($Vh,[2,31]),o($VW,[2,36]),o($Vh,[2,39]),{29:[1,221],77:[1,220]},{28:222,29:$Vl},o($Vh,[2,33]),o($Vh,[2,34]),{32:$Vm,33:$Vn,41:223,48:$Vo,61:$Vp,64:77,65:78,66:79,67:$Vq,68:$Vr,69:$Vs,70:$Vt,71:$Vu},{76:[1,224]},{35:[1,225],47:$Vw,48:$Vx,49:$Vy,50:$Vz,51:$VA,52:$VB,53:$VC,54:$VD,55:$VE,56:$VF,57:$VG,58:$VH,59:$VI,60:$VJ,62:$VK},o($VO,[2,80],{47:$Vw,48:$Vx,49:$Vy,50:$Vz,51:$VA,52:$VB,53:$VC,54:$VD,55:$VE,56:$VF,57:$VG,58:$VH,59:$VI,60:$VJ,62:$VK}),{40:[1,226]},o($Vh,[2,90],{82:227,83:[1,228]}),o($Vh,[2,92]),{85:229,87:[1,230]},o($Vh,[2,101]),{39:[1,231],47:$Vw,48:$Vx,49:$Vy,50:$Vz,51:$VA,52:$VB,53:$VC,54:$VD,55:$VE,56:$VF,57:$VG,58:$VH,59:$VI,60:$VJ,62:$VK},o($VM,[2,110],{47:$Vw,48:$Vx,49:$Vy,50:$Vz,51:$VA,52:$VB,53:$VC,54:$VD,55:$VE,56:$VF,57:$VG,58:$VH,59:$VI,60:$VJ,62:$VK}),{32:$Vm,33:$Vn,41:232,48:$Vo,61:$Vp,64:77,65:78,66:79,67:$Vq,68:$Vr,69:$Vs,70:$Vt,71:$Vu},{35:[1,233],47:$Vw,48:$Vx,49:$Vy,50:$Vz,51:$VA,52:$VB,53:$VC,54:$VD,55:$VE,56:$VF,57:$VG,58:$VH,59:$VI,60:$VJ,62:$VK},{32:$Vm,33:$Vn,41:234,48:$Vo,61:$Vp,64:77,65:78,66:79,67:$Vq,68:$Vr,69:$Vs,70:$Vt,71:$Vu},o($VL,[2,67]),o($VL,[2,84]),{47:$Vw,48:$Vx,49:$Vy,50:$Vz,51:$VA,52:$VB,53:$VC,54:$VD,55:$VE,56:$VF,57:$VG,58:$VH,59:$VI,60:$VJ,62:$VK,76:[1,235]},o($Vh,[2,29]),{32:[1,236]},{31:237,42:$V3,43:$V4,44:$V5,45:$V6,46:$V7},{32:$Vm,33:$Vn,41:101,48:$Vo,61:$Vp,64:77,65:78,66:79,67:$Vq,68:$Vr,69:$Vs,70:$Vt,71:$Vu,74:238},o($Vh,[2,32]),{39:[1,239],47:$Vw,48:$Vx,49:$Vy,50:$Vz,51:$VA,52:$VB,53:$VC,54:$VD,55:$VE,56:$VF,57:$VG,58:$VH,59:$VI,60:$VJ,62:$VK},{40:[1,240]},{39:[1,241]},{77:[1,242]},o($Vh,[2,91]),{19:244,28:243,29:$Vl,81:$V9},{30:[1,246],86:245,87:[1,247],88:[1,248]},{32:$Vm,33:$Vn,41:249,48:$Vo,61:$Vp,64:77,65:78,66:79,67:$Vq,68:$Vr,69:$Vs,70:$Vt,71:$Vu},{32:[1,254],72:251,73:252,92:250,93:253},{39:[2,111],47:$Vw,48:$Vx,49:$Vy,50:$Vz,51:$VA,52:$VB,53:$VC,54:$VD,55:$VE,56:$VF,57:$VG,58:$VH,59:$VI,60:$VJ,62:$VK},{39:[1,255]},o([30,35,37,39,63,76],[2,62],{47:$Vw,48:$Vx,49:$Vy,50:$Vz,51:$VA,52:$VB,53:$VC,54:$VD,55:$VE,56:$VF,57:$VG,58:$VH,59:$VI,60:$VJ,62:$VK}),{76:[1,256]},o($VW,[2,35]),{75:[1,257]},{30:[1,258],37:$VN},o($Vh,[2,85]),{32:$Vm,33:$Vn,41:259,48:$Vo,61:$Vp,64:77,65:78,66:79,67:$Vq,68:$Vr,69:$Vs,70:$Vt,71:$Vu},o($Vh,[2,87]),{78:[1,260]},o($Vh,[2,93]),o($Vh,[2,94]),{30:[1,261]},o($Vh,[2,96]),{32:$Vm,33:$Vn,41:262,48:$Vo,61:$Vp,64:77,65:78,66:79,67:$Vq,68:$Vr,69:$Vs,70:$Vt,71:$Vu},{63:[1,263]},{47:$Vw,48:$Vx,49:$Vy,50:$Vz,51:$VA,52:$VB,53:$VC,54:$VD,55:$VE,56:$VF,57:$VG,58:$VH,59:$VI,60:$VJ,62:$VK,63:[1,264]},{35:[1,265]},{35:[2,107]},{35:[2,108]},{35:[2,109]},{40:$VP,47:$Vj,48:$Vk},o($Vh,[2,112]),o($VL,[2,88]),{32:$Vm,33:$Vn,41:266,48:$Vo,61:$Vp,64:77,65:78,66:79,67:$Vq,68:$Vr,69:$Vs,70:$Vt,71:$Vu},{39:[1,267]},{39:[1,268],47:$Vw,48:$Vx,49:$Vy,50:$Vz,51:$VA,52:$VB,53:$VC,54:$VD,55:$VE,56:$VF,57:$VG,58:$VH,59:$VI,60:$VJ,62:$VK},{55:[1,269]},o($Vh,[2,95]),{47:$Vw,48:$Vx,49:$Vy,50:$Vz,51:$VA,52:$VB,53:$VC,54:$VD,55:$VE,56:$VF,57:$VG,58:$VH,59:$VI,60:$VJ,62:$VK,63:[1,270]},{4:271,6:4,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:17,20:18,21:19,22:20,23:21,24:22,25:23,26:24,27:25,31:26,32:$V0,36:$V1,38:$V2,42:$V3,43:$V4,44:$V5,45:$V6,46:$V7,64:38,72:30,73:31,78:$V8,81:$V9,84:$Va,89:$Vb,90:$Vc,95:$Vd,96:$Ve,97:$Vf,98:$Vg},{4:272,6:4,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:17,20:18,21:19,22:20,23:21,24:22,25:23,26:24,27:25,31:26,32:$V0,36:$V1,38:$V2,42:$V3,43:$V4,44:$V5,45:$V6,46:$V7,64:38,72:30,73:31,78:$V8,81:$V9,84:$Va,89:$Vb,90:$Vc,95:$Vd,96:$Ve,97:$Vf,98:$Vg},{28:273,29:$Vl},{47:$Vw,48:$Vx,49:$Vy,50:$Vz,51:$VA,52:$VB,53:$VC,54:$VD,55:$VE,56:$VF,57:$VG,58:$VH,59:$VI,60:$VJ,62:$VK,76:[1,274]},o($Vh,[2,83]),o($Vh,[2,89]),{31:275,42:$V3,43:$V4,44:$V5,45:$V6,46:$V7},{4:276,6:4,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:17,20:18,21:19,22:20,23:21,24:22,25:23,26:24,27:25,31:26,32:$V0,36:$V1,38:$V2,42:$V3,43:$V4,44:$V5,45:$V6,46:$V7,64:38,72:30,73:31,78:$V8,81:$V9,84:$Va,89:$Vb,90:$Vc,95:$Vd,96:$Ve,97:$Vf,98:$Vg},{6:48,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:17,20:18,21:19,22:20,23:21,24:22,25:23,26:24,27:25,30:[2,100],31:26,32:$V0,36:$V1,38:$V2,42:$V3,43:$V4,44:$V5,45:$V6,46:$V7,64:38,72:30,73:31,78:$V8,81:$V9,84:$Va,89:$Vb,90:$Vc,95:$Vd,96:$Ve,97:$Vf,98:$Vg},o($VX,[2,99],{7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:17,20:18,21:19,22:20,23:21,24:22,25:23,26:24,27:25,31:26,72:30,73:31,64:38,6:48,32:$V0,36:$V1,38:$V2,42:$V3,43:$V4,44:$V5,45:$V6,46:$V7,78:$V8,81:$V9,84:$Va,89:$Vb,90:$Vc,95:$Vd,96:$Ve,97:$Vf,98:$Vg}),o($Vh,[2,103]),{39:[1,277]},{57:[1,278]},o($VX,[2,98],{7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:17,20:18,21:19,22:20,23:21,24:22,25:23,26:24,27:25,31:26,72:30,73:31,64:38,6:48,32:$V0,36:$V1,38:$V2,42:$V3,43:$V4,44:$V5,45:$V6,46:$V7,78:$V8,81:$V9,84:$Va,89:$Vb,90:$Vc,95:$Vd,96:$Ve,97:$Vf,98:$Vg}),o($Vh,[2,82]),{39:[1,279]},o($Vh,[2,86])],
defaultActions: {47:[2,1],49:[2,2],111:[2,105],112:[2,106],251:[2,107],252:[2,108],253:[2,109]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

  const s = require('/home/pablo/Documentos/src/Universidad/-Compi1-Proyecto-2/typesty/src/Analyzer/symbols.js')
  const errors = []

  const Error = function (Linea, Columna, Tipo, Mensaje) {
    errors.push({
      Linea,
      Columna,
      Tipo,
      Mensaje
    })
  }

  const getErrores = function () {
    const temp = [...errors];
    errors.length = 0;
    return temp;
  }
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:
break;
case 1:
break;
case 2:
break;
case 3:
break;
case 4:return 47;
break;
case 5:return 48;
break;
case 6:return 49;
break;
case 7:return 50;
break;
case 8:return 51;
break;
case 9:return 52;
break;
case 10:return 53;
break;
case 11:return 54;
break;
case 12:return 56;
break;
case 13:return 58;
break;
case 14:return 55;
break;
case 15:return 57;
break;
case 16:return 59;
break;
case 17:return 60;
break;
case 18:return 61;
break;
case 19:return 62;
break;
case 20:return 33;
break;
case 21:return 35;
break;
case 22:return 75;
break;
case 23:return 76;
break;
case 24:return 29;
break;
case 25:return 30;
break;
case 26:return 40;
break;
case 27:return 39;
break;
case 28:return 63;
break;
case 29:return 79;
break;
case 30:return 37;
break;
case 31:return 42;
break;
case 32:return 43;
break;
case 33:return 44;
break;
case 34:return 45;
break;
case 35:return 46;
break;
case 36:return 78;
break;
case 37:return 77;
break;
case 38:return 81;
break;
case 39:return 83;
break;
case 40:return 84;
break;
case 41:return 87;
break;
case 42:return 88;
break;
case 43:return 89;
break;
case 44:return 90;
break;
case 45:return 95;
break;
case 46:return 97;
break;
case 47:return 98;
break;
case 48:return 96;
break;
case 49:return 36;
break;
case 50:return 80;
break;
case 51:return 38;
break;
case 52:return 71;
break;
case 53:return 68;
break;
case 54:return 67;
break;
case 55: yy_.yytext = yy_.yytext.substr(1, yy_.yyleng - 2); return 69; 
break;
case 56: yy_.yytext = yy_.yytext.substr(1, yy_.yyleng - 2); return 70; 
break;
case 57:return 32;
break;
case 58:return 5;
break;
case 59: Error(yy_.yylloc.first_line, yy_.yylloc.first_column, 'Léxico', `No se reconoció el lexema '${yy_.yytext}'`); 
break;
}
},
rules: [/^(?:[\040\t\r]+)/i,/^(?:\n)/i,/^(?:\/\/.*)/i,/^(?:\/\*([^*]|[\r\n]|(\*+([^*/]|[\r\n])))*\*+\/)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:\^)/i,/^(?:%)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:<)/i,/^(?:>)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:!)/i,/^(?:\?)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\{)/i,/^(?:\})/i,/^(?:=)/i,/^(?:;)/i,/^(?::)/i,/^(?:\.)/i,/^(?:,)/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:boolean\b)/i,/^(?:char\b)/i,/^(?:string\b)/i,/^(?:list\b)/i,/^(?:new\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:while\b)/i,/^(?:for\b)/i,/^(?:do\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:void\b)/i,/^(?:add\b)/i,/^(?:exec\b)/i,/^(?:true|false\b)/i,/^(?:[0-9]+\.[0-9]+)/i,/^(?:[0-9]+)/i,/^(?:'[\x00-\x7F]')/i,/^(?:"((\\n)|(\\\\)|(\\')|(\\t)|(\\")|[^\n\"])*")/i,/^(?:[a-z][a-z0-9_]*)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}