/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,29],$V1=[1,27],$V2=[1,28],$V3=[1,42],$V4=[1,43],$V5=[1,44],$V6=[1,45],$V7=[1,46],$V8=[1,32],$V9=[1,33],$Va=[1,34],$Vb=[1,35],$Vc=[1,36],$Vd=[1,37],$Ve=[1,39],$Vf=[1,40],$Vg=[1,41],$Vh=[5,30,32,36,38,45,46,47,48,49,79,84,87,90,91,92,93,98,99,100,101],$Vi=[1,60],$Vj=[1,58],$Vk=[1,59],$Vl=[1,70],$Vm=[1,79],$Vn=[1,75],$Vo=[1,73],$Vp=[1,74],$Vq=[1,80],$Vr=[1,81],$Vs=[1,82],$Vt=[1,83],$Vu=[1,84],$Vv=[32,76,81],$Vw=[1,121],$Vx=[1,122],$Vy=[1,123],$Vz=[1,124],$VA=[1,125],$VB=[1,126],$VC=[1,127],$VD=[1,128],$VE=[1,129],$VF=[1,130],$VG=[1,131],$VH=[1,132],$VI=[1,133],$VJ=[1,134],$VK=[30,35,37,39,43,44,50,51,52,53,54,55,56,57,58,59,60,61,62,63,77],$VL=[35,39],$VM=[1,155],$VN=[30,35,37],$VO=[1,165],$VP=[5,30,32,36,38,45,46,47,48,49,79,84,86,87,90,91,92,93,98,99,100,101],$VQ=[30,35,37,39,43,44,62,63,77],$VR=[1,190],$VS=[30,35,37,39,43,44,50,51,56,57,58,59,60,61,62,63,77],$VT=[30,35,37,39,43,44,50,51,52,53,55,56,57,58,59,60,61,62,63,77],$VU=[30,35,37,39,43,44,56,57,58,59,60,61,62,63,77],$VV=[35,37],$VW=[30,90,91];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INI":3,"INS":4,"EOF":5,"S":6,"DECLARACION_FUNCION":7,"DECLARACION_METODO":8,"EXEC":9,"DECLARACION_VARIABLE":10,"ASIGNACION_VARIABLE":11,"INCREMENTO_VARIABLE":12,"DECREMENTO_VARIABLE":13,"DECLARACION_VECTOR":14,"MODIFICACION_VECTOR":15,"DECLARACION_LISTA":16,"ADD_LISTA":17,"MODIFICACION_LISTA":18,"S_IF":19,"S_SWITCH":20,"S_WHILE":21,"S_FOR":22,"S_DO":23,"S_LLAMADA":24,"S_RETURN":25,"S_BREAK":26,"S_CONTINUE":27,"BLOQUE":28,"llaveA":29,"llaveB":30,"TIPO":31,"id":32,"parA":33,"PARAMETROS":34,"parB":35,"r_void":36,"coma":37,"r_exec":38,"puntocoma":39,"igual":40,"E":41,"OPERACION_TERNARIA":42,"ternary":43,"dospuntos":44,"r_int":45,"r_double":46,"r_boolean":47,"r_char":48,"r_string":49,"opar_suma":50,"opar_resta":51,"opar_multiplicacion":52,"opar_division":53,"opar_potencia":54,"opar_modulo":55,"oprel_igualacion":56,"oprel_diferenciacion":57,"oprel_menor":58,"oprel_menorigual":59,"oprel_mayor":60,"oprel_mayorigual":61,"oplog_or":62,"oplog_and":63,"oplog_not":64,"LLAMADA":65,"ACCESO_VECTOR":66,"ACCESO_LISTA":67,"int":68,"double":69,"char":70,"string":71,"boolean":72,"INCREMENTO":73,"DECREMENTO":74,"VALORES":75,"corA":76,"corB":77,"r_new":78,"r_list":79,"menor":80,"mayor":81,"punto":82,"r_add":83,"r_if":84,"S_ELSE":85,"r_else":86,"r_switch":87,"CASES":88,"S_DEFAULT":89,"r_case":90,"r_default":91,"r_while":92,"r_for":93,"INICIALIZACION":94,"ACTUALIZACION":95,"ASIGNACION":96,"DECLARACION":97,"r_do":98,"r_return":99,"r_break":100,"r_continue":101,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",29:"llaveA",30:"llaveB",32:"id",33:"parA",35:"parB",36:"r_void",37:"coma",38:"r_exec",39:"puntocoma",40:"igual",43:"ternary",44:"dospuntos",45:"r_int",46:"r_double",47:"r_boolean",48:"r_char",49:"r_string",50:"opar_suma",51:"opar_resta",52:"opar_multiplicacion",53:"opar_division",54:"opar_potencia",55:"opar_modulo",56:"oprel_igualacion",57:"oprel_diferenciacion",58:"oprel_menor",59:"oprel_menorigual",60:"oprel_mayor",61:"oprel_mayorigual",62:"oplog_or",63:"oplog_and",64:"oplog_not",68:"int",69:"double",70:"char",71:"string",72:"boolean",76:"corA",77:"corB",78:"r_new",79:"r_list",80:"menor",81:"mayor",82:"punto",83:"r_add",84:"r_if",86:"r_else",87:"r_switch",90:"r_case",91:"r_default",92:"r_while",93:"r_for",98:"r_do",99:"r_return",100:"r_break",101:"r_continue"},
productions_: [0,[3,2],[3,2],[4,2],[4,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[28,3],[28,2],[28,3],[7,6],[7,5],[7,5],[8,6],[8,5],[8,5],[34,4],[34,2],[9,2],[10,3],[10,5],[11,4],[11,4],[42,5],[31,1],[31,1],[31,1],[31,1],[31,1],[41,3],[41,3],[41,3],[41,3],[41,3],[41,3],[41,3],[41,3],[41,3],[41,3],[41,3],[41,3],[41,3],[41,3],[41,2],[41,2],[41,3],[41,1],[41,1],[41,1],[41,3],[41,3],[41,1],[41,1],[41,1],[41,1],[41,1],[41,1],[12,2],[13,2],[73,3],[74,3],[75,3],[75,1],[14,11],[14,9],[66,4],[15,7],[16,12],[17,7],[67,6],[18,9],[19,5],[19,6],[19,4],[85,2],[85,2],[20,8],[20,7],[20,4],[88,5],[88,4],[89,3],[21,5],[21,4],[22,9],[22,4],[94,1],[94,1],[95,1],[95,1],[95,1],[96,3],[97,4],[23,7],[23,3],[24,2],[65,3],[65,4],[25,3],[26,2],[27,2]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 return { body: $$[$0-1], errors: getErrores() } 
break;
case 2: case 28: case 31: case 34: case 92: case 97: case 102: case 104: case 113:
 Error(this._$.last_line, this._$.last_column, "Sint√°ctico", `No se esperaba '${yytext}'`); 
break;
case 3:
 this.$ = $$[$0-1]; this.$.push($$[$0]); 
break;
case 4: case 81:
 this.$ = [$$[$0]]; 
break;
case 5: case 6: case 7: case 8: case 9: case 10: case 11: case 12: case 13: case 14: case 15: case 16: case 17: case 18: case 19: case 20: case 21: case 22: case 23: case 24: case 25: case 43: case 44: case 45: case 46: case 47: case 65: case 66: case 67: case 93: case 94: case 105: case 106: case 107: case 108: case 109:
 this.$ = $$[$0]; 
break;
case 26: case 64: case 76: case 77: case 114:
 this.$ = $$[$0-1]; 
break;
case 27:
 this.$ = []; 
break;
case 29:
 this.$ = Funcion($$[$0-5], $$[$0-4], $$[$0-2], $$[$0]); 
break;
case 30:
 this.$ = Funcion($$[$0-4], $$[$0-3], [], $$[$0]); 
break;
case 32:
 this.$ = Metodo($$[$0-4], $$[$0-2], $$[$0]); 
break;
case 33:
 this.$ = Metodo($$[$0-3], [], $$[$0]); 
break;
case 35:
 this.$ = $$[$0-3]; this.$.push(Parametro($$[$0-1], $$[$0])); 
break;
case 36:
 this.$ = [Parametro($$[$0-1], $$[$0])]; 
break;
case 37:
 this.$ = Exec($$[$0]); 
break;
case 38:
 this.$ = Declaracion($$[$0-2], $$[$0-1], null); 
break;
case 39:
 this.$ = Declaracion($$[$0-4], $$[$0-3], $$[$0-1]); 
break;
case 40: case 41:
 this.$ = Asignacion($$[$0-3], $$[$0-1]); 
break;
case 42:
 this.$ = Ternaria($$[$0-4], $$[$0-2], $$[$0]); 
break;
case 48:
 this.$ = Operacion("suma", $$[$0-2], $$[$0]); 
break;
case 49:
 this.$ = Operacion("resta", $$[$0-2], $$[$0]); 
break;
case 50:
 this.$ = Operacion("multiplicacion", $$[$0-2], $$[$0]); 
break;
case 51:
 this.$ = Operacion("division", $$[$0-2], $$[$0]); 
break;
case 52:
 this.$ = Operacion("potencia", $$[$0-2], $$[$0]); 
break;
case 53:
 this.$ = Operacion("modulo", $$[$0-2], $$[$0]); 
break;
case 54:
 this.$ = Operacion("igualacion", $$[$0-2], $$[$0]); 
break;
case 55:
 this.$ = Operacion("diferenciacion", $$[$0-2], $$[$0]); 
break;
case 56:
 this.$ = Operacion("menor", $$[$0-2], $$[$0]); 
break;
case 57:
 this.$ = Operacion("menorigual", $$[$0-2], $$[$0]); 
break;
case 58:
 this.$ = Operacion("mayor", $$[$0-2], $$[$0]); 
break;
case 59:
 this.$ = Operacion("mayorigual", $$[$0-2], $$[$0]); 
break;
case 60:
 this.$ = Operacion("or", $$[$0-2], $$[$0]); 
break;
case 61:
 this.$ = Operacion("and", $$[$0-2], $$[$0]); 
break;
case 62:
 this.$ = Operacion("negacion", $$[$0], null); 
break;
case 63:
 this.$ = Operacion("not", $$[$0], null); 
break;
case 68:
 this.$ = Operacion("incremento", $$[$0-2], null); 
break;
case 69:
 this.$ = Operacion("decremento", $$[$0-2], null); 
break;
case 70:
 this.$ = Operacion("id", $$[$0], null); 
break;
case 71:
 this.$ = Operacion("int", $$[$0], null); 
break;
case 72:
 this.$ = Operacion("double", $$[$0], null); 
break;
case 73:
 this.$ = Operacion("char", $$[$0], null); 
break;
case 74:
 this.$ = Operacion("string", $$[$0], null); 
break;
case 75:
 this.$ = Operacion("boolean", $$[$0], null); 
break;
case 78:
 this.$ = Incremento($$[$0-2]); 
break;
case 79:
 this.$ = Decremento($$[$0-2]); 
break;
case 80:
 this.$ = $$[$0-2]; this.$.push($$[$0]); 
break;
case 82:
 this.$ = Vector($$[$0-10], $$[$0-7], $$[$0-4], $$[$0-2], null); 
break;
case 83:
 this.$ = Vector($$[$0-8], $$[$0-5], null, null, $$[$0-2]); 
break;
case 84:
 this.$ = Acceso_vector($$[$0-3], $$[$0-1]); 
break;
case 85:
 this.$ = Modificacion_vector($$[$0-6], $$[$0-4], $$[$0-1]); 
break;
case 86:
 this.$ = Lista($$[$0-9], $$[$0-7], $$[$0-2]); 
break;
case 87:
 this.$ = Add_lista($$[$0-6], $$[$0-2]); 
break;
case 88:
 this.$ = Acceso_lista($$[$0-5], $$[$0-2]); 
break;
case 89:
 this.$ = Modificacion_lista($$[$0-8], $$[$0-5], $$[$0-1]); 
break;
case 90:
 this.$ = If($$[$0-2], $$[$0], null); 
break;
case 91:
 this.$ = If($$[$0-3], $$[$0-1], $$[$0]); 
break;
case 95:
 this.$ = Switch($$[$0-5], $$[$0-2], $$[$0-1]); 
break;
case 96:
 this.$ = Switch($$[$0-4], $$[$0-1], null); 
break;
case 98:
 this.$ = $$[$0-4]; this.$.push(Case($$[$0-2], $$[$0])); 
break;
case 99:
 this.$ = [Case($$[$0-2], $$[$0])]; 
break;
case 100:
 this.$ = Default($$[$0]); 
break;
case 101:
 this.$ = While($$[$0-2], $$[$0]); 
break;
case 103:
 this.$ = For($$[$0-6], $$[$0-4], $$[$0-2], $$[$0]); 
break;
case 110:
 this.$ = Asignacion($$[$0-2], $$[$0]); 
break;
case 111:
 this.$ = Declaracion($$[$0-3], $$[$0-2], $$[$0]); 
break;
case 112:
 this.$ = Do_while($$[$0-2], $$[$0-5]); 
break;
case 115:
 this.$ = Llamada($$[$0-2], []); 
break;
case 116:
 this.$ = Llamada($$[$0-3], $$[$0-1]); 
break;
case 117:
 this.$ = Return($$[$0-1]); 
break;
case 118:
 this.$ = Break(); 
break;
case 119:
 this.$ = Continue(); 
break;
}
},
table: [{2:[1,3],3:1,4:2,6:4,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:17,20:18,21:19,22:20,23:21,24:22,25:23,26:24,27:25,31:26,32:$V0,36:$V1,38:$V2,45:$V3,46:$V4,47:$V5,48:$V6,49:$V7,65:38,73:30,74:31,79:$V8,84:$V9,87:$Va,92:$Vb,93:$Vc,98:$Vd,99:$Ve,100:$Vf,101:$Vg},{1:[3]},{5:[1,47],6:48,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:17,20:18,21:19,22:20,23:21,24:22,25:23,26:24,27:25,31:26,32:$V0,36:$V1,38:$V2,45:$V3,46:$V4,47:$V5,48:$V6,49:$V7,65:38,73:30,74:31,79:$V8,84:$V9,87:$Va,92:$Vb,93:$Vc,98:$Vd,99:$Ve,100:$Vf,101:$Vg},{5:[1,49]},o($Vh,[2,4]),o($Vh,[2,5]),o($Vh,[2,6]),o($Vh,[2,7]),o($Vh,[2,8]),o($Vh,[2,9]),o($Vh,[2,10]),o($Vh,[2,11]),o($Vh,[2,12]),o($Vh,[2,13]),o($Vh,[2,14]),o($Vh,[2,15]),o($Vh,[2,16]),o($Vh,[2,17]),o($Vh,[2,18]),o($Vh,[2,19]),o($Vh,[2,20]),o($Vh,[2,21]),o($Vh,[2,22]),o($Vh,[2,23]),o($Vh,[2,24]),o($Vh,[2,25]),{32:[1,50],76:[1,51]},{32:[1,52]},{24:53,32:[1,54],65:38},{33:$Vi,40:[1,55],50:$Vj,51:$Vk,76:[1,56],82:[1,57]},{39:[1,61]},{39:[1,62]},{80:[1,63]},{33:[1,64]},{33:[1,65]},{33:[1,66]},{33:[1,67]},{2:[1,69],28:68,29:$Vl},{39:[1,71]},{32:$Vm,33:$Vn,41:72,51:$Vo,64:$Vp,65:76,66:77,67:78,68:$Vq,69:$Vr,70:$Vs,71:$Vt,72:$Vu},{39:[1,85]},{39:[1,86]},o($Vv,[2,43]),o($Vv,[2,44]),o($Vv,[2,45]),o($Vv,[2,46]),o($Vv,[2,47]),{1:[2,1]},o($Vh,[2,3]),{1:[2,2]},{33:[1,87],39:[1,88],40:[1,89]},{77:[1,90]},{33:[1,91]},o($Vh,[2,37]),{33:$Vi},{32:$Vm,33:$Vn,41:92,42:93,51:$Vo,64:$Vp,65:76,66:77,67:78,68:$Vq,69:$Vr,70:$Vs,71:$Vt,72:$Vu},{32:$Vm,33:$Vn,41:94,51:$Vo,64:$Vp,65:76,66:77,67:78,68:$Vq,69:$Vr,70:$Vs,71:$Vt,72:$Vu,76:[1,95]},{83:[1,96]},{50:[1,97]},{51:[1,98]},{32:$Vm,33:$Vn,35:[1,99],41:101,51:$Vo,64:$Vp,65:76,66:77,67:78,68:$Vq,69:$Vr,70:$Vs,71:$Vt,72:$Vu,75:100},o($Vh,[2,76]),o($Vh,[2,77]),{31:102,45:$V3,46:$V4,47:$V5,48:$V6,49:$V7},{2:[1,104],32:$Vm,33:$Vn,41:103,51:$Vo,64:$Vp,65:76,66:77,67:78,68:$Vq,69:$Vr,70:$Vs,71:$Vt,72:$Vu},{2:[1,106],32:$Vm,33:$Vn,41:105,51:$Vo,64:$Vp,65:76,66:77,67:78,68:$Vq,69:$Vr,70:$Vs,71:$Vt,72:$Vu},{2:[1,108],32:$Vm,33:$Vn,41:107,51:$Vo,64:$Vp,65:76,66:77,67:78,68:$Vq,69:$Vr,70:$Vs,71:$Vt,72:$Vu},{2:[1,110],31:114,32:[1,113],45:$V3,46:$V4,47:$V5,48:$V6,49:$V7,94:109,96:111,97:112},{92:[1,115]},{39:[1,116]},{2:[1,119],4:117,6:4,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:17,20:18,21:19,22:20,23:21,24:22,25:23,26:24,27:25,30:[1,118],31:26,32:$V0,36:$V1,38:$V2,45:$V3,46:$V4,47:$V5,48:$V6,49:$V7,65:38,73:30,74:31,79:$V8,84:$V9,87:$Va,92:$Vb,93:$Vc,98:$Vd,99:$Ve,100:$Vf,101:$Vg},o($Vh,[2,114]),{39:[1,120],50:$Vw,51:$Vx,52:$Vy,53:$Vz,54:$VA,55:$VB,56:$VC,57:$VD,58:$VE,59:$VF,60:$VG,61:$VH,62:$VI,63:$VJ},{32:$Vm,33:$Vn,41:135,51:$Vo,64:$Vp,65:76,66:77,67:78,68:$Vq,69:$Vr,70:$Vs,71:$Vt,72:$Vu},{32:$Vm,33:$Vn,41:136,51:$Vo,64:$Vp,65:76,66:77,67:78,68:$Vq,69:$Vr,70:$Vs,71:$Vt,72:$Vu},{32:$Vm,33:$Vn,41:137,51:$Vo,64:$Vp,65:76,66:77,67:78,68:$Vq,69:$Vr,70:$Vs,71:$Vt,72:$Vu},o($VK,[2,65]),o($VK,[2,66]),o($VK,[2,67]),o($VK,[2,70],{33:$Vi,76:[1,138]}),o($VK,[2,71]),o($VK,[2,72]),o($VK,[2,73]),o($VK,[2,74]),o($VK,[2,75]),o($Vh,[2,118]),o($Vh,[2,119]),{2:[1,141],31:142,34:139,35:[1,140],45:$V3,46:$V4,47:$V5,48:$V6,49:$V7},o($Vh,[2,38]),{32:$Vm,33:$Vn,41:143,51:$Vo,64:$Vp,65:76,66:77,67:78,68:$Vq,69:$Vr,70:$Vs,71:$Vt,72:$Vu},{32:[1,144]},{2:[1,147],31:142,34:145,35:[1,146],45:$V3,46:$V4,47:$V5,48:$V6,49:$V7},{39:[1,148],43:[1,149],50:$Vw,51:$Vx,52:$Vy,53:$Vz,54:$VA,55:$VB,56:$VC,57:$VD,58:$VE,59:$VF,60:$VG,61:$VH,62:$VI,63:$VJ},{39:[1,150]},{50:$Vw,51:$Vx,52:$Vy,53:$Vz,54:$VA,55:$VB,56:$VC,57:$VD,58:$VE,59:$VF,60:$VG,61:$VH,62:$VI,63:$VJ,77:[1,151]},{32:$Vm,33:$Vn,41:152,51:$Vo,64:$Vp,65:76,66:77,67:78,68:$Vq,69:$Vr,70:$Vs,71:$Vt,72:$Vu},{33:[1,153]},o($VL,[2,78]),o($VL,[2,79]),o($VK,[2,115]),{35:[1,154],37:$VM},o($VN,[2,81],{50:$Vw,51:$Vx,52:$Vy,53:$Vz,54:$VA,55:$VB,56:$VC,57:$VD,58:$VE,59:$VF,60:$VG,61:$VH,62:$VI,63:$VJ}),{81:[1,156]},{35:[1,157],50:$Vw,51:$Vx,52:$Vy,53:$Vz,54:$VA,55:$VB,56:$VC,57:$VD,58:$VE,59:$VF,60:$VG,61:$VH,62:$VI,63:$VJ},{30:[1,158]},{35:[1,159],50:$Vw,51:$Vx,52:$Vy,53:$Vz,54:$VA,55:$VB,56:$VC,57:$VD,58:$VE,59:$VF,60:$VG,61:$VH,62:$VI,63:$VJ},{30:[1,160]},{35:[1,161],50:$Vw,51:$Vx,52:$Vy,53:$Vz,54:$VA,55:$VB,56:$VC,57:$VD,58:$VE,59:$VF,60:$VG,61:$VH,62:$VI,63:$VJ},{30:[1,162]},{39:[1,163]},{30:[1,164]},{39:[2,105]},{39:[2,106]},{40:$VO},{32:[1,166]},{33:[1,167]},o($Vh,[2,113]),{6:48,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:17,20:18,21:19,22:20,23:21,24:22,25:23,26:24,27:25,30:[1,168],31:26,32:$V0,36:$V1,38:$V2,45:$V3,46:$V4,47:$V5,48:$V6,49:$V7,65:38,73:30,74:31,79:$V8,84:$V9,87:$Va,92:$Vb,93:$Vc,98:$Vd,99:$Ve,100:$Vf,101:$Vg},o($VP,[2,27]),{30:[1,169]},o($Vh,[2,117]),{32:$Vm,33:$Vn,41:170,50:[1,171],51:$Vo,64:$Vp,65:76,66:77,67:78,68:$Vq,69:$Vr,70:$Vs,71:$Vt,72:$Vu},{32:$Vm,33:$Vn,41:172,51:[1,173],64:$Vp,65:76,66:77,67:78,68:$Vq,69:$Vr,70:$Vs,71:$Vt,72:$Vu},{32:$Vm,33:$Vn,41:174,51:$Vo,64:$Vp,65:76,66:77,67:78,68:$Vq,69:$Vr,70:$Vs,71:$Vt,72:$Vu},{32:$Vm,33:$Vn,41:175,51:$Vo,64:$Vp,65:76,66:77,67:78,68:$Vq,69:$Vr,70:$Vs,71:$Vt,72:$Vu},{32:$Vm,33:$Vn,41:176,51:$Vo,64:$Vp,65:76,66:77,67:78,68:$Vq,69:$Vr,70:$Vs,71:$Vt,72:$Vu},{32:$Vm,33:$Vn,41:177,51:$Vo,64:$Vp,65:76,66:77,67:78,68:$Vq,69:$Vr,70:$Vs,71:$Vt,72:$Vu},{32:$Vm,33:$Vn,41:178,51:$Vo,64:$Vp,65:76,66:77,67:78,68:$Vq,69:$Vr,70:$Vs,71:$Vt,72:$Vu},{32:$Vm,33:$Vn,41:179,51:$Vo,64:$Vp,65:76,66:77,67:78,68:$Vq,69:$Vr,70:$Vs,71:$Vt,72:$Vu},{32:$Vm,33:$Vn,41:180,51:$Vo,64:$Vp,65:76,66:77,67:78,68:$Vq,69:$Vr,70:$Vs,71:$Vt,72:$Vu},{32:$Vm,33:$Vn,41:181,51:$Vo,64:$Vp,65:76,66:77,67:78,68:$Vq,69:$Vr,70:$Vs,71:$Vt,72:$Vu},{32:$Vm,33:$Vn,41:182,51:$Vo,64:$Vp,65:76,66:77,67:78,68:$Vq,69:$Vr,70:$Vs,71:$Vt,72:$Vu},{32:$Vm,33:$Vn,41:183,51:$Vo,64:$Vp,65:76,66:77,67:78,68:$Vq,69:$Vr,70:$Vs,71:$Vt,72:$Vu},{32:$Vm,33:$Vn,41:184,51:$Vo,64:$Vp,65:76,66:77,67:78,68:$Vq,69:$Vr,70:$Vs,71:$Vt,72:$Vu},{32:$Vm,33:$Vn,41:185,51:$Vo,64:$Vp,65:76,66:77,67:78,68:$Vq,69:$Vr,70:$Vs,71:$Vt,72:$Vu},o($VK,[2,62]),o($VQ,[2,63],{50:$Vw,51:$Vx,52:$Vy,53:$Vz,54:$VA,55:$VB,56:$VC,57:$VD,58:$VE,59:$VF,60:$VG,61:$VH}),{35:[1,186],50:$Vw,51:$Vx,52:$Vy,53:$Vz,54:$VA,55:$VB,56:$VC,57:$VD,58:$VE,59:$VF,60:$VG,61:$VH,62:$VI,63:$VJ},{32:$Vm,33:$Vn,41:187,51:$Vo,64:$Vp,65:76,66:77,67:78,68:$Vq,69:$Vr,70:$Vs,71:$Vt,72:$Vu,76:[1,188]},{35:[1,189],37:$VR},{28:191,29:$Vl},{30:[1,192]},{32:[1,193]},{39:[1,194],50:$Vw,51:$Vx,52:$Vy,53:$Vz,54:$VA,55:$VB,56:$VC,57:$VD,58:$VE,59:$VF,60:$VG,61:$VH,62:$VI,63:$VJ},{40:[1,195]},{35:[1,196],37:$VR},{28:197,29:$Vl},{30:[1,198]},o($Vh,[2,40]),{32:$Vm,33:$Vn,41:199,51:$Vo,64:$Vp,65:76,66:77,67:78,68:$Vq,69:$Vr,70:$Vs,71:$Vt,72:$Vu},o($Vh,[2,41]),{40:[1,200]},{50:$Vw,51:$Vx,52:$Vy,53:$Vz,54:$VA,55:$VB,56:$VC,57:$VD,58:$VE,59:$VF,60:$VG,61:$VH,62:$VI,63:$VJ,77:[1,201]},{32:$Vm,33:$Vn,41:202,51:$Vo,64:$Vp,65:76,66:77,67:78,68:$Vq,69:$Vr,70:$Vs,71:$Vt,72:$Vu},o($VK,[2,116]),{32:$Vm,33:$Vn,41:203,51:$Vo,64:$Vp,65:76,66:77,67:78,68:$Vq,69:$Vr,70:$Vs,71:$Vt,72:$Vu},{32:[1,204]},{28:205,29:$Vl},o($Vh,[2,92]),{29:[1,206]},o($Vh,[2,97]),{28:207,29:$Vl},o($Vh,[2,102]),{32:$Vm,33:$Vn,41:208,51:$Vo,64:$Vp,65:76,66:77,67:78,68:$Vq,69:$Vr,70:$Vs,71:$Vt,72:$Vu},o($Vh,[2,104]),{32:$Vm,33:$Vn,41:209,51:$Vo,64:$Vp,65:76,66:77,67:78,68:$Vq,69:$Vr,70:$Vs,71:$Vt,72:$Vu},{40:[1,210]},{32:$Vm,33:$Vn,41:211,51:$Vo,64:$Vp,65:76,66:77,67:78,68:$Vq,69:$Vr,70:$Vs,71:$Vt,72:$Vu},o($VP,[2,26]),o($VP,[2,28]),o($VS,[2,48],{52:$Vy,53:$Vz,54:$VA,55:$VB}),o($VK,[2,68]),o($VS,[2,49],{52:$Vy,53:$Vz,54:$VA,55:$VB}),o($VK,[2,69],{65:76,66:77,67:78,41:135,32:$Vm,33:$Vn,64:$Vp,68:$Vq,69:$Vr,70:$Vs,71:$Vt,72:$Vu}),o($VT,[2,50],{54:$VA}),o($VT,[2,51],{54:$VA}),o($VK,[2,52]),o($VT,[2,53],{54:$VA}),o($VU,[2,54],{50:$Vw,51:$Vx,52:$Vy,53:$Vz,54:$VA,55:$VB}),o($VU,[2,55],{50:$Vw,51:$Vx,52:$Vy,53:$Vz,54:$VA,55:$VB}),o($VU,[2,56],{50:$Vw,51:$Vx,52:$Vy,53:$Vz,54:$VA,55:$VB}),o($VU,[2,57],{50:$Vw,51:$Vx,52:$Vy,53:$Vz,54:$VA,55:$VB}),o($VU,[2,58],{50:$Vw,51:$Vx,52:$Vy,53:$Vz,54:$VA,55:$VB}),o($VU,[2,59],{50:$Vw,51:$Vx,52:$Vy,53:$Vz,54:$VA,55:$VB}),o([30,35,37,39,43,44,62,77],[2,60],{50:$Vw,51:$Vx,52:$Vy,53:$Vz,54:$VA,55:$VB,56:$VC,57:$VD,58:$VE,59:$VF,60:$VG,61:$VH,63:$VJ}),o($VQ,[2,61],{50:$Vw,51:$Vx,52:$Vy,53:$Vz,54:$VA,55:$VB,56:$VC,57:$VD,58:$VE,59:$VF,60:$VG,61:$VH}),o($VK,[2,64]),{50:$Vw,51:$Vx,52:$Vy,53:$Vz,54:$VA,55:$VB,56:$VC,57:$VD,58:$VE,59:$VF,60:$VG,61:$VH,62:$VI,63:$VJ,77:[1,212]},{32:$Vm,33:$Vn,41:213,51:$Vo,64:$Vp,65:76,66:77,67:78,68:$Vq,69:$Vr,70:$Vs,71:$Vt,72:$Vu},{28:214,29:$Vl},{31:215,45:$V3,46:$V4,47:$V5,48:$V6,49:$V7},o($Vh,[2,30]),o($Vh,[2,31]),o($VV,[2,36]),o($Vh,[2,39]),{29:[1,217],78:[1,216]},{28:218,29:$Vl},o($Vh,[2,33]),o($Vh,[2,34]),{44:[1,219],50:$Vw,51:$Vx,52:$Vy,53:$Vz,54:$VA,55:$VB,56:$VC,57:$VD,58:$VE,59:$VF,60:$VG,61:$VH,62:$VI,63:$VJ},{32:$Vm,33:$Vn,41:220,51:$Vo,64:$Vp,65:76,66:77,67:78,68:$Vq,69:$Vr,70:$Vs,71:$Vt,72:$Vu},{77:[1,221]},{35:[1,222],50:$Vw,51:$Vx,52:$Vy,53:$Vz,54:$VA,55:$VB,56:$VC,57:$VD,58:$VE,59:$VF,60:$VG,61:$VH,62:$VI,63:$VJ},o($VN,[2,80],{50:$Vw,51:$Vx,52:$Vy,53:$Vz,54:$VA,55:$VB,56:$VC,57:$VD,58:$VE,59:$VF,60:$VG,61:$VH,62:$VI,63:$VJ}),{40:[1,223]},o($Vh,[2,90],{85:224,86:[1,225]}),{88:226,90:[1,227]},o($Vh,[2,101]),{39:[1,228],50:$Vw,51:$Vx,52:$Vy,53:$Vz,54:$VA,55:$VB,56:$VC,57:$VD,58:$VE,59:$VF,60:$VG,61:$VH,62:$VI,63:$VJ},o($VL,[2,110],{50:$Vw,51:$Vx,52:$Vy,53:$Vz,54:$VA,55:$VB,56:$VC,57:$VD,58:$VE,59:$VF,60:$VG,61:$VH,62:$VI,63:$VJ}),{32:$Vm,33:$Vn,41:229,51:$Vo,64:$Vp,65:76,66:77,67:78,68:$Vq,69:$Vr,70:$Vs,71:$Vt,72:$Vu},{35:[1,230],50:$Vw,51:$Vx,52:$Vy,53:$Vz,54:$VA,55:$VB,56:$VC,57:$VD,58:$VE,59:$VF,60:$VG,61:$VH,62:$VI,63:$VJ},o($VK,[2,84]),{50:$Vw,51:$Vx,52:$Vy,53:$Vz,54:$VA,55:$VB,56:$VC,57:$VD,58:$VE,59:$VF,60:$VG,61:$VH,62:$VI,63:$VJ,77:[1,231]},o($Vh,[2,29]),{32:[1,232]},{31:233,45:$V3,46:$V4,47:$V5,48:$V6,49:$V7},{32:$Vm,33:$Vn,41:101,51:$Vo,64:$Vp,65:76,66:77,67:78,68:$Vq,69:$Vr,70:$Vs,71:$Vt,72:$Vu,75:234},o($Vh,[2,32]),{32:$Vm,33:$Vn,41:235,51:$Vo,64:$Vp,65:76,66:77,67:78,68:$Vq,69:$Vr,70:$Vs,71:$Vt,72:$Vu},{39:[1,236],50:$Vw,51:$Vx,52:$Vy,53:$Vz,54:$VA,55:$VB,56:$VC,57:$VD,58:$VE,59:$VF,60:$VG,61:$VH,62:$VI,63:$VJ},{40:[1,237]},{39:[1,238]},{78:[1,239]},o($Vh,[2,91]),{19:241,28:240,29:$Vl,84:$V9},{30:[1,243],89:242,90:[1,244],91:[1,245]},{32:$Vm,33:$Vn,41:246,51:$Vo,64:$Vp,65:76,66:77,67:78,68:$Vq,69:$Vr,70:$Vs,71:$Vt,72:$Vu},{32:[1,251],73:248,74:249,95:247,96:250},{39:[2,111],50:$Vw,51:$Vx,52:$Vy,53:$Vz,54:$VA,55:$VB,56:$VC,57:$VD,58:$VE,59:$VF,60:$VG,61:$VH,62:$VI,63:$VJ},{39:[1,252]},{77:[1,253]},o($VV,[2,35]),{76:[1,254]},{30:[1,255],37:$VM},{39:[2,42],50:$Vw,51:$Vx,52:$Vy,53:$Vz,54:$VA,55:$VB,56:$VC,57:$VD,58:$VE,59:$VF,60:$VG,61:$VH,62:$VI,63:$VJ},o($Vh,[2,85]),{32:$Vm,33:$Vn,41:256,51:$Vo,64:$Vp,65:76,66:77,67:78,68:$Vq,69:$Vr,70:$Vs,71:$Vt,72:$Vu},o($Vh,[2,87]),{79:[1,257]},o($Vh,[2,93]),o($Vh,[2,94]),{30:[1,258]},o($Vh,[2,96]),{32:$Vm,33:$Vn,41:259,51:$Vo,64:$Vp,65:76,66:77,67:78,68:$Vq,69:$Vr,70:$Vs,71:$Vt,72:$Vu},{44:[1,260]},{44:[1,261],50:$Vw,51:$Vx,52:$Vy,53:$Vz,54:$VA,55:$VB,56:$VC,57:$VD,58:$VE,59:$VF,60:$VG,61:$VH,62:$VI,63:$VJ},{35:[1,262]},{35:[2,107]},{35:[2,108]},{35:[2,109]},{40:$VO,50:$Vj,51:$Vk},o($Vh,[2,112]),o($VK,[2,88]),{32:$Vm,33:$Vn,41:263,51:$Vo,64:$Vp,65:76,66:77,67:78,68:$Vq,69:$Vr,70:$Vs,71:$Vt,72:$Vu},{39:[1,264]},{39:[1,265],50:$Vw,51:$Vx,52:$Vy,53:$Vz,54:$VA,55:$VB,56:$VC,57:$VD,58:$VE,59:$VF,60:$VG,61:$VH,62:$VI,63:$VJ},{80:[1,266]},o($Vh,[2,95]),{44:[1,267],50:$Vw,51:$Vx,52:$Vy,53:$Vz,54:$VA,55:$VB,56:$VC,57:$VD,58:$VE,59:$VF,60:$VG,61:$VH,62:$VI,63:$VJ},{4:268,6:4,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:17,20:18,21:19,22:20,23:21,24:22,25:23,26:24,27:25,31:26,32:$V0,36:$V1,38:$V2,45:$V3,46:$V4,47:$V5,48:$V6,49:$V7,65:38,73:30,74:31,79:$V8,84:$V9,87:$Va,92:$Vb,93:$Vc,98:$Vd,99:$Ve,100:$Vf,101:$Vg},{4:269,6:4,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:17,20:18,21:19,22:20,23:21,24:22,25:23,26:24,27:25,31:26,32:$V0,36:$V1,38:$V2,45:$V3,46:$V4,47:$V5,48:$V6,49:$V7,65:38,73:30,74:31,79:$V8,84:$V9,87:$Va,92:$Vb,93:$Vc,98:$Vd,99:$Ve,100:$Vf,101:$Vg},{28:270,29:$Vl},{50:$Vw,51:$Vx,52:$Vy,53:$Vz,54:$VA,55:$VB,56:$VC,57:$VD,58:$VE,59:$VF,60:$VG,61:$VH,62:$VI,63:$VJ,77:[1,271]},o($Vh,[2,83]),o($Vh,[2,89]),{31:272,45:$V3,46:$V4,47:$V5,48:$V6,49:$V7},{4:273,6:4,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:17,20:18,21:19,22:20,23:21,24:22,25:23,26:24,27:25,31:26,32:$V0,36:$V1,38:$V2,45:$V3,46:$V4,47:$V5,48:$V6,49:$V7,65:38,73:30,74:31,79:$V8,84:$V9,87:$Va,92:$Vb,93:$Vc,98:$Vd,99:$Ve,100:$Vf,101:$Vg},{6:48,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:17,20:18,21:19,22:20,23:21,24:22,25:23,26:24,27:25,30:[2,100],31:26,32:$V0,36:$V1,38:$V2,45:$V3,46:$V4,47:$V5,48:$V6,49:$V7,65:38,73:30,74:31,79:$V8,84:$V9,87:$Va,92:$Vb,93:$Vc,98:$Vd,99:$Ve,100:$Vf,101:$Vg},o($VW,[2,99],{7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:17,20:18,21:19,22:20,23:21,24:22,25:23,26:24,27:25,31:26,73:30,74:31,65:38,6:48,32:$V0,36:$V1,38:$V2,45:$V3,46:$V4,47:$V5,48:$V6,49:$V7,79:$V8,84:$V9,87:$Va,92:$Vb,93:$Vc,98:$Vd,99:$Ve,100:$Vf,101:$Vg}),o($Vh,[2,103]),{39:[1,274]},{81:[1,275]},o($VW,[2,98],{7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:17,20:18,21:19,22:20,23:21,24:22,25:23,26:24,27:25,31:26,73:30,74:31,65:38,6:48,32:$V0,36:$V1,38:$V2,45:$V3,46:$V4,47:$V5,48:$V6,49:$V7,79:$V8,84:$V9,87:$Va,92:$Vb,93:$Vc,98:$Vd,99:$Ve,100:$Vf,101:$Vg}),o($Vh,[2,82]),{39:[1,276]},o($Vh,[2,86])],
defaultActions: {47:[2,1],49:[2,2],111:[2,105],112:[2,106],248:[2,107],249:[2,108],250:[2,109]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

  const Errores = []

  const Error = function (Linea, Columna, Tipo, Mensaje){
    Errores.push({
      Linea,
      Columna,
      Tipo,
      Mensaje,
    })
  }

  const getErrores = function () {
    const temp = [...Errores];
    Errores.length = 0;
    return temp;
  }

  const Exec = function (Llamada) {
    return {
      Tipo: "Exec",
      Llamada,
    }
  }

  const Funcion = function (Tipo_retorno, ID, Parametros, Instrucciones) {
    return {
      Tipo: "Funcion",
      Tipo_retorno,
      ID,
      Parametros,
      Instrucciones,
    }
  }

  const Metodo = function (ID, Parametros, Instrucciones) {
    return {
      Tipo: "Metodo",
      ID,
      Parametros,
      Instrucciones,
    }
  }

  const Parametro = function (Tipo, ID) {
    return {
      Tipo,
      ID,
    }
  }

  const Operacion = function (Tipo, Izquierda, Derecha) {
    return {
      Tipo,
      Izquierda,
      Derecha,
    }
  }

  const Simbolo = function (Tipo, Valor) {
    return {
      Tipo,
      Valor,
    }
  }

  const Declaracion = function (Tipo_variable, ID, Expresion) {
    return {
      Tipo: "Declaracion",
      Tipo_variable,
      ID,
      Expresion,
    }
  }

  const Asignacion = function (ID, Expresion) {
    return {
      Tipo: "Asignacion",
      ID,
      Expresion,
    }
  }

  const Ternaria = function (Condicion, Expresion_true, Expresion_false) {
    return {
      Tipo: "Ternaria",
      Condicion,
      Expresion_true,
      Expresion_false,
    }
  }

  const Llamada = function (ID, Parametros) {
    return {
      Tipo: "Llamada",
      ID,
      Parametros,
    }
  }

  const Incremento = function (ID) {
    return {
      Tipo: "Incremento",
      ID,
    }
  }

  const Decremento = function (ID) {
    return {
      Tipo: "Decremento",
      ID,
    }
  }

  const Vector = function (Tipo_vector, ID, Tipo_i, Tama√±o, Valores) {
    return {
      Tipo: "Declarar_vector",
      Tipo_vector,
      ID,
      Tipo_i,
      Tama√±o,
      Valores,
    }
  }

  const Lista = function (Tipo_lista, ID) {
    return {
      Tipo: "Declarar_lista",
      Tipo_lista,
      ID,
    }
  }

  const Acceso_vector = function (ID, Index) {
    return {
      Tipo: "Acceso_vector",
      ID,
      Index,
    }
  }

  const Acceso_lista = function (ID, Index) {
    return {
      Tipo: "Acceso_lista",
      ID,
      Index,
    }
  }

  const Modificacion_vector = function (ID, Index, Expresion) {
    return {
      Tipo: "Modificacion_vector",
      ID,
      Index,
      Expresion,
    }
  }

  const Modificacion_lista = function (ID, Index, Expresion) {
    return {
      Tipo: "Modificacion_lista",
      ID,
      Index,
      Expresion,
    }
  }

  const Add_lista = function (ID, Expresion) {
    return {
      Tipo: "Add_lista",
      ID,
      Expresion,
    }
  }

  const If = function (Condicion, Instrucciones_true, Instrucciones_false) {
    return {
      Tipo: "If",
      Condicion,
      Instrucciones_true,
      Instrucciones_false,
    }
  }

  const Switch = function (Expresion, Cases, Default) {
    return {
      Tipo: "Switch",
      Expresion,
      Cases,
      Default,
    }
  }

  const Case = function (Expresion, Instrucciones) {
    return {
      Tipo: "Case",
      Expresion,
      Instrucciones,
    }
  }

  const Default = function (Instrucciones) {
    return {
      Tipo: "Default",
      Instrucciones,
    }
  }

  const While = function (Condicion, Instrucciones) {
    return {
      Tipo: "While",
      Condicion,
      Instrucciones,
    }
  }

  const For = function (Inicializacion, Condicion, Actualizacion, Instrucciones) {
    return {
      Tipo: "For",
      Inicializacion,
      Condicion,
      Actualizacion,
      Instrucciones,
    }
  }

  const Do_while = function (Condicion, Instrucciones) {
    return {
      Tipo: "Do-while",
      Condicion,
      Instrucciones,
    }
  }

  const Return = function (Expresion) {
    return {
      Tipo: "Return",
      Expresion,
    }
  }

  const Break = function () {
    return {
      Tipo: "Break",
    }
  }

  const Continue = function () {
    return {
      Tipo: "Continue",
    }
  }
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:
break;
case 1:
break;
case 2:
break;
case 3:
break;
case 4:return "opar_suma";
break;
case 5:return "opar_resta";
break;
case 6:return "opar_multiplicacion";
break;
case 7:return "opar_division";
break;
case 8:return "opar_potencia";
break;
case 9:return "opar_modulo";
break;
case 10:return "oprel_igualacion";
break;
case 11:return "oprel_diferenciacion";
break;
case 12:return "oprel_menorigual";
break;
case 13:return "oprel_mayorigual";
break;
case 14:return "oprel_menor";
break;
case 15:return "oprel_mayor";
break;
case 16:return "oplog_or";
break;
case 17:return "oplog_and";
break;
case 18:return "oplog_not";
break;
case 19:return "ternary";
break;
case 20:return "parA";
break;
case 21:return "parB";
break;
case 22:return "corA";
break;
case 23:return "corB";
break;
case 24:return "llaveA";
break;
case 25:return "llaveB";
break;
case 26:return "igual";
break;
case 27:return "puntocoma";
break;
case 28:return "dospuntos";
break;
case 29:return "punto";
break;
case 30:return "coma";
break;
case 31:return "r_int";
break;
case 32:return "r_double";
break;
case 33:return "r_boolean";
break;
case 34:return "r_char";
break;
case 35:return "r_string";
break;
case 36:return "r_list";
break;
case 37:return "r_new";
break;
case 38:return "r_if";
break;
case 39:return "r_else";
break;
case 40:return "r_switch";
break;
case 41:return "r_case";
break;
case 42:return "r_default";
break;
case 43:return "r_while";
break;
case 44:return "r_for";
break;
case 45:return "r_do";
break;
case 46:return "r_break";
break;
case 47:return "r_continue";
break;
case 48:return "r_return";
break;
case 49:return "r_void";
break;
case 50:return "r_add";
break;
case 51:return "r_exec";
break;
case 52:return "double";
break;
case 53:return "int";
break;
case 54:return "char";
break;
case 55: yy_.yytext = yy_.yytext.substr(1, yy_.yyleng - 2); return "string"; 
break;
case 56: yy_.yytext = yy_.yytext.substr(1, yy_.yyleng - 2); return "string"; 
break;
case 57:return "id";
break;
case 58:return "EOF";
break;
case 59: Error(yy_.yylloc.first_line, yy_.yylloc.first_column, "L√©xico", `No se reconoci√≥ '${yy_.yytext}'`); 
break;
}
},
rules: [/^(?:[\040\t\r]+)/i,/^(?:\n)/i,/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/][^*]*[*]+)*[/])/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:\^)/i,/^(?:%)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:<)/i,/^(?:>)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:!)/i,/^(?:\?)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\{)/i,/^(?:\})/i,/^(?:=)/i,/^(?:;)/i,/^(?::)/i,/^(?:\.)/i,/^(?:,)/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:boolean\b)/i,/^(?:char\b)/i,/^(?:string\b)/i,/^(?:list\b)/i,/^(?:new\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:while\b)/i,/^(?:for\b)/i,/^(?:do\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:void\b)/i,/^(?:add\b)/i,/^(?:exec\b)/i,/^(?:[0-9]+\.[0-9]+)/i,/^(?:[0-9]+)/i,/^(?:'[\x00-\x7F]')/i,/^(?:"((\\n)|(\\\\)|(\\")|(\\t)|(\\')|[^\n\"])*")/i,/^(?:'((\\n)|(\\\\)|(\\")|(\\t)|(\\')|[^\n\'])*')/i,/^(?:[a-z][a-z0-9_]*)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}